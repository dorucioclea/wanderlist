{"ast":null,"code":"import axios from 'axios';\naxios.defaults.xsrfCookieName = 'csrftoken';\naxios.defaults.xsrfHeaderName = 'X-CSRFToken'; // For fetching the first page of all of the users Trip Reports\n\nexport var fetchTripReportsPending = function fetchTripReportsPending() {\n  return {\n    type: \"FETCH_TRIP_REPORTS_PENDING\"\n  };\n};\nexport var fetchTripReportsFulfilled = function fetchTripReportsFulfilled(tripReports) {\n  return {\n    type: \"FETCH_TRIP_REPORTS_FULFILLED\",\n    tripReports: tripReports\n  };\n};\nexport var fetchTripReportsRejected = function fetchTripReportsRejected() {\n  return {\n    type: \"FETCH_TRIP_REPORTS_REJECTED\"\n  };\n}; // For fetching the next page of all of the users Trip Reports\n\nexport var fetchNextTripReportsPending = function fetchNextTripReportsPending() {\n  return {\n    type: \"FETCH_NEXT_TRIP_REPORTS_PENDING\"\n  };\n};\nexport var fetchNextTripReportsFulfilled = function fetchNextTripReportsFulfilled(tripReports) {\n  return {\n    type: \"FETCH_NEXT_TRIP_REPORTS_FULFILLED\",\n    tripReports: tripReports\n  };\n};\nexport var fetchNextTripReportsRejected = function fetchNextTripReportsRejected() {\n  return {\n    type: \"FETCH_NEXT_TRIP_REPORTS_REJECTED\"\n  };\n}; // For fetching the first page of Trip Reports of the authenticated user\n\nexport var fetchUserTripReportsPending = function fetchUserTripReportsPending() {\n  return {\n    type: \"FETCH_USER_TRIP_REPORTS_PENDING\"\n  };\n};\nexport var fetchUserTripReportsFulfilled = function fetchUserTripReportsFulfilled(tripReports) {\n  return {\n    type: \"FETCH_USER_TRIP_REPORTS_FULFILLED\",\n    tripReports: tripReports\n  };\n};\nexport var fetchUserTripReportsRejected = function fetchUserTripReportsRejected() {\n  return {\n    type: \"FETCH_USER_TRIP_REPORTS_REJECTED\"\n  };\n}; // For fetching the next page of the authenticated users Trip Reports\n\nexport var fetchNextUserTripReportsPending = function fetchNextUserTripReportsPending() {\n  return {\n    type: \"FETCH_NEXT_USER_TRIP_REPORTS_PENDING\"\n  };\n};\nexport var fetchNextUserTripReportsFulfilled = function fetchNextUserTripReportsFulfilled(tripReports) {\n  return {\n    type: \"FETCH_NEXT_USER_TRIP_REPORTS_FULFILLED\",\n    tripReports: tripReports\n  };\n};\nexport var fetchNextUserTripReportsRejected = function fetchNextUserTripReportsRejected() {\n  return {\n    type: \"FETCH_NEXT_USER_TRIP_REPORTS_REJECTED\"\n  };\n}; // For the authenticated user to POST request a new trip report\n\nexport var postTripReportsPending = function postTripReportsPending() {\n  return {\n    type: \"POST_TRIP_REPORTS_PENDING\"\n  };\n};\nexport var postTripReportsFulfilled = function postTripReportsFulfilled(response) {\n  return {\n    type: \"POST_TRIP_REPORTS_FULFILLED\",\n    response: response\n  };\n};\nexport var postTripReportsRejected = function postTripReportsRejected() {\n  return {\n    type: \"POST_TRIP_REPORTS_REJECTED\"\n  };\n}; // For the authenticated user to delete a Trip Report of theirs\n\nexport var deleteTripReportsPending = function deleteTripReportsPending() {\n  return {\n    type: \"DELETE_TRIP_REPORTS_PENDING\"\n  };\n};\nexport var deleteTripReportsFulfilled = function deleteTripReportsFulfilled(response) {\n  return {\n    type: \"DELETE_TRIP_REPORTS_FULFILLED\",\n    response: response\n  };\n};\nexport var deleteTripReportsRejected = function deleteTripReportsRejected() {\n  return {\n    type: \"DELETE_TRIP_REPORTS_REJECTED\"\n  };\n}; // For the authenticated user to update a Trip Report of theirs\n\nexport var updateTripReportsPending = function updateTripReportsPending() {\n  return {\n    type: \"UPDATE_TRIP_REPORTS_PENDING\"\n  };\n};\nexport var updateTripReportsFulfilled = function updateTripReportsFulfilled(response) {\n  return {\n    type: \"UPDATE_TRIP_REPORTS_FULFILLED\",\n    response: response\n  };\n};\nexport var updateTripReportsRejected = function updateTripReportsRejected() {\n  return {\n    type: \"UPDATE_TRIP_REPORTS_REJECTED\"\n  };\n}; // For fetching the post based off slug\n\nexport var fetchSlugTripReportsPending = function fetchSlugTripReportsPending() {\n  return {\n    type: \"FETCH_SLUG_TRIP_REPORTS_PENDING\"\n  };\n};\nexport var fetchSlugTripReportsFulfilled = function fetchSlugTripReportsFulfilled(tripReports) {\n  return {\n    type: \"FETCH_SLUG_TRIP_REPORTS_FULFILLED\",\n    tripReports: tripReports\n  };\n};\nexport var fetchSlugTripReportsRejected = function fetchSlugTripReportsRejected() {\n  return {\n    type: \"FETCH_SLUG_TRIP_REPORTS_REJECTED\"\n  };\n};\n/*\nGET requests the Django REST API and returns the first page of a list of Trip\nReports. The passed in url can have filter parameters added.\n*/\n\nexport var fetchTripReports = function fetchTripReports(url) {\n  return function (dispatch) {\n    dispatch(fetchTripReportsPending());\n    axios.get(url).then(function (response) {\n      var tripReports = response.data;\n      dispatch(fetchTripReportsFulfilled(tripReports));\n    }).catch(function (err) {\n      dispatch(fetchTripReportsRejected());\n      dispatch({\n        type: \"ADD_ERROR\",\n        error: err\n      });\n    });\n  };\n};\n/*\nSince the Trip Reports are paginated, the original axios call returns an object\nwith a Next variable that contains the link API of the the next page, which is\npassed into this function to GET the next Trip Reports.\n*/\n\nexport var fetchNextTripReports = function fetchNextTripReports(url) {\n  return function (dispatch) {\n    dispatch(fetchNextTripReportsPending());\n    axios.get(url).then(function (response) {\n      var tripReports = response.data;\n      dispatch(fetchNextTripReportsFulfilled(tripReports));\n    }).catch(function (err) {\n      dispatch(fetchNextTripReportsRejected());\n      dispatch({\n        type: \"ADD_ERROR\",\n        error: err\n      });\n    });\n  };\n};\n/*\nGET requests the Django REST API with the parameter of username to return the\nfirst page of the list of the Users TripReports.\n*/\n\nexport var fetchUserTripReports = function fetchUserTripReports(username) {\n  return function (dispatch) {\n    dispatch(fetchUserTripReportsPending());\n    axios.get(\"\".concat(process.env.REACT_APP_API_URL, \"/api/v1/reports/?ordering=-pk&search=\").concat(username)).then(function (response) {\n      var tripReports = response.data;\n      dispatch(fetchUserTripReportsFulfilled(tripReports));\n    }).catch(function (err) {\n      dispatch(fetchUserTripReportsRejected());\n      dispatch({\n        type: \"ADD_ERROR\",\n        error: err\n      });\n    });\n  };\n};\n/*\nAgain, the paginated API returns a next variable that is the url to the next\npage, which is passed into this function to retrieve the next page of the user's\nTrip Reports.\n*/\n\nexport var fetchNextUserTripReports = function fetchNextUserTripReports(url) {\n  return function (dispatch) {\n    dispatch(fetchNextUserTripReportsPending());\n    axios.get(url).then(function (response) {\n      var tripReports = response.data;\n      dispatch(fetchNextUserTripReportsFulfilled(tripReports));\n    }).catch(function (err) {\n      dispatch(fetchNextUserTripReportsRejected());\n      dispatch({\n        type: \"ADD_ERROR\",\n        error: err\n      });\n    });\n  };\n};\n/*\nPOST requests a new trip report to the Django REST API by the authenticated\nuser.\n*/\n\nexport var postTripReport = function postTripReport(author, title, content, countries, image) {\n  var token = localStorage.getItem('token');\n  return function (dispatch) {\n    dispatch(postTripReportsPending());\n    var formData = new FormData();\n    formData.append('title', title);\n    formData.append('content', content);\n    formData.append('author', author);\n    formData.append('countries', countries);\n    formData.append('image', image);\n    axios.post(\"\".concat(process.env.REACT_APP_API_URL, \"/api/v1/reports/\"), formData, {\n      headers: {\n        'Authorization': \"Token \".concat(token)\n      }\n    }).then(function (response) {\n      dispatch(postTripReportsFulfilled(response.data));\n    }).catch(function (err) {\n      dispatch(postTripReportsRejected());\n      dispatch({\n        type: \"ADD_ERROR\",\n        error: err\n      });\n    });\n  };\n}; // DELETES a post of the authenticated user on the API.\n\nexport var deleteTripReport = function deleteTripReport(tripReport) {\n  var token = localStorage.getItem('token');\n  return function (dispatch) {\n    dispatch(deleteTripReportsPending());\n    axios.delete(\"\".concat(process.env.REACT_APP_API_URL, \"/api/v1/reports/\").concat(tripReport.id, \"/\"), {\n      headers: {\n        'X-Requested-With': 'XMLHttpRequest',\n        'X-CSRFToken': 'csrftoken',\n        'Authorization': \"Token \".concat(token)\n      }\n    }).then(function (response) {\n      dispatch(deleteTripReportsFulfilled(tripReport));\n      dispatch({\n        type: \"ADD_SUCCESS\",\n        success: 'Your post has been deleted.'\n      });\n    }).catch(function (err) {\n      dispatch(deleteTripReportsRejected());\n      dispatch({\n        type: \"ADD_ERROR\",\n        error: err\n      });\n    });\n  };\n}; // UPDATEs a post of the authenticated user on the API.\n\nexport var updateTripReport = function updateTripReport(tripReport, author, title, content, countries, image) {\n  var token = localStorage.getItem('token');\n  return function (dispatch) {\n    dispatch(updateTripReportsPending());\n    var formData = new FormData();\n    formData.append('title', title);\n    formData.append('content', content);\n    formData.append('author', author);\n    formData.append('countries', countries); // If image is field is left blank, the original image does not get updated or deleted.\n\n    if (image) {\n      formData.append('image', image);\n    }\n\n    axios.patch(\"\".concat(process.env.REACT_APP_API_URL, \"/api/v1/reports/\").concat(tripReport, \"/\"), formData, {\n      headers: {\n        'X-Requested-With': 'XMLHttpRequest',\n        'X-CSRFToken': 'csrftoken',\n        'Authorization': \"Token \".concat(token)\n      }\n    }).then(function (response) {\n      dispatch(updateTripReportsFulfilled(response.data));\n      dispatch({\n        type: \"ADD_SUCCESS\",\n        success: 'Your post has been updated.'\n      });\n    }).catch(function (err) {\n      dispatch(updateTripReportsRejected());\n      dispatch({\n        type: \"ADD_ERROR\",\n        error: err\n      });\n    });\n  };\n};\n/*\nFetches a single Trip Report based on slug to display on the posts /p/${slug}/\npage.\n*/\n\nexport var fetchSlugTripReports = function fetchSlugTripReports(slug) {\n  return function (dispatch) {\n    dispatch(fetchSlugTripReportsPending());\n    axios.get(\"\".concat(process.env.REACT_APP_API_URL, \"/api/v1/reports/?search=\").concat(slug)).then(function (response) {\n      var tripReports = response.data;\n      dispatch(fetchSlugTripReportsFulfilled(tripReports));\n    }).catch(function (err) {\n      dispatch(fetchSlugTripReportsRejected());\n      dispatch({\n        type: \"ADD_ERROR\",\n        error: err\n      });\n    });\n  };\n};","map":{"version":3,"sources":["/Users/peterzernia/projects/countries/src/actions/tripReportActions.js"],"names":["axios","defaults","xsrfCookieName","xsrfHeaderName","fetchTripReportsPending","type","fetchTripReportsFulfilled","tripReports","fetchTripReportsRejected","fetchNextTripReportsPending","fetchNextTripReportsFulfilled","fetchNextTripReportsRejected","fetchUserTripReportsPending","fetchUserTripReportsFulfilled","fetchUserTripReportsRejected","fetchNextUserTripReportsPending","fetchNextUserTripReportsFulfilled","fetchNextUserTripReportsRejected","postTripReportsPending","postTripReportsFulfilled","response","postTripReportsRejected","deleteTripReportsPending","deleteTripReportsFulfilled","deleteTripReportsRejected","updateTripReportsPending","updateTripReportsFulfilled","updateTripReportsRejected","fetchSlugTripReportsPending","fetchSlugTripReportsFulfilled","fetchSlugTripReportsRejected","fetchTripReports","url","dispatch","get","then","data","catch","err","error","fetchNextTripReports","fetchUserTripReports","username","process","env","REACT_APP_API_URL","fetchNextUserTripReports","postTripReport","author","title","content","countries","image","token","localStorage","getItem","formData","FormData","append","post","headers","deleteTripReport","tripReport","delete","id","success","updateTripReport","patch","fetchSlugTripReports","slug"],"mappings":"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","sourcesContent":["import axios from 'axios'\naxios.defaults.xsrfCookieName = 'csrftoken'\naxios.defaults.xsrfHeaderName = 'X-CSRFToken'\n\n// For fetching the first page of all of the users Trip Reports\nexport const fetchTripReportsPending = () => {\n  return {\n    type: \"FETCH_TRIP_REPORTS_PENDING\"\n  }\n}\n\nexport const fetchTripReportsFulfilled = tripReports => {\n  return {\n    type: \"FETCH_TRIP_REPORTS_FULFILLED\",\n    tripReports: tripReports\n  }\n}\n\nexport const fetchTripReportsRejected = () => {\n  return {\n    type: \"FETCH_TRIP_REPORTS_REJECTED\"\n  }\n}\n\n// For fetching the next page of all of the users Trip Reports\nexport const fetchNextTripReportsPending = () => {\n  return {\n    type: \"FETCH_NEXT_TRIP_REPORTS_PENDING\"\n  }\n}\n\nexport const fetchNextTripReportsFulfilled = tripReports => {\n  return {\n    type: \"FETCH_NEXT_TRIP_REPORTS_FULFILLED\",\n    tripReports: tripReports\n  }\n}\n\nexport const fetchNextTripReportsRejected = () => {\n  return {\n    type: \"FETCH_NEXT_TRIP_REPORTS_REJECTED\"\n  }\n}\n\n// For fetching the first page of Trip Reports of the authenticated user\nexport const fetchUserTripReportsPending = () => {\n  return {\n    type: \"FETCH_USER_TRIP_REPORTS_PENDING\"\n  }\n}\n\nexport const fetchUserTripReportsFulfilled = tripReports => {\n  return {\n    type: \"FETCH_USER_TRIP_REPORTS_FULFILLED\",\n    tripReports: tripReports\n  }\n}\n\nexport const fetchUserTripReportsRejected = () => {\n  return {\n    type: \"FETCH_USER_TRIP_REPORTS_REJECTED\",\n  }\n}\n\n// For fetching the next page of the authenticated users Trip Reports\nexport const fetchNextUserTripReportsPending = () => {\n  return {\n    type: \"FETCH_NEXT_USER_TRIP_REPORTS_PENDING\"\n  }\n}\n\nexport const fetchNextUserTripReportsFulfilled = tripReports => {\n  return {\n    type: \"FETCH_NEXT_USER_TRIP_REPORTS_FULFILLED\",\n    tripReports: tripReports\n  }\n}\n\nexport const fetchNextUserTripReportsRejected = () => {\n  return {\n    type: \"FETCH_NEXT_USER_TRIP_REPORTS_REJECTED\"\n  }\n}\n\n// For the authenticated user to POST request a new trip report\nexport const postTripReportsPending = () => {\n  return {\n    type: \"POST_TRIP_REPORTS_PENDING\"\n  }\n}\n\nexport const postTripReportsFulfilled = response => {\n  return {\n    type: \"POST_TRIP_REPORTS_FULFILLED\",\n    response: response\n  }\n}\n\nexport const postTripReportsRejected = () => {\n  return {\n    type: \"POST_TRIP_REPORTS_REJECTED\",\n  }\n}\n\n// For the authenticated user to delete a Trip Report of theirs\nexport const deleteTripReportsPending = () => {\n  return {\n    type: \"DELETE_TRIP_REPORTS_PENDING\"\n  }\n}\n\nexport const deleteTripReportsFulfilled = response => {\n  return {\n    type: \"DELETE_TRIP_REPORTS_FULFILLED\",\n    response: response\n  }\n}\n\nexport const deleteTripReportsRejected = () => {\n  return {\n    type: \"DELETE_TRIP_REPORTS_REJECTED\",\n  }\n}\n\n// For the authenticated user to update a Trip Report of theirs\nexport const updateTripReportsPending = () => {\n  return {\n    type: \"UPDATE_TRIP_REPORTS_PENDING\"\n  }\n}\n\nexport const updateTripReportsFulfilled = response => {\n  return {\n    type: \"UPDATE_TRIP_REPORTS_FULFILLED\",\n    response: response\n  }\n}\n\nexport const updateTripReportsRejected = () => {\n  return {\n    type: \"UPDATE_TRIP_REPORTS_REJECTED\",\n  }\n}\n\n// For fetching the post based off slug\nexport const fetchSlugTripReportsPending = () => {\n  return {\n    type: \"FETCH_SLUG_TRIP_REPORTS_PENDING\"\n  }\n}\n\nexport const fetchSlugTripReportsFulfilled = tripReports => {\n  return {\n    type: \"FETCH_SLUG_TRIP_REPORTS_FULFILLED\",\n    tripReports: tripReports\n  }\n}\n\nexport const fetchSlugTripReportsRejected = () => {\n  return {\n    type: \"FETCH_SLUG_TRIP_REPORTS_REJECTED\",\n  }\n}\n\n/*\nGET requests the Django REST API and returns the first page of a list of Trip\nReports. The passed in url can have filter parameters added.\n*/\nexport const fetchTripReports = (url) => {\n  return dispatch => {\n    dispatch(fetchTripReportsPending());\n    axios.get(url)\n      .then(response => {\n        const tripReports = response.data;\n        dispatch(fetchTripReportsFulfilled(tripReports));\n      })\n      .catch(err => {\n        dispatch(fetchTripReportsRejected());\n        dispatch({type: \"ADD_ERROR\", error: err});\n      })\n  }\n}\n\n/*\nSince the Trip Reports are paginated, the original axios call returns an object\nwith a Next variable that contains the link API of the the next page, which is\npassed into this function to GET the next Trip Reports.\n*/\nexport const fetchNextTripReports = (url) => {\n  return dispatch => {\n    dispatch(fetchNextTripReportsPending());\n    axios.get(url)\n      .then(response => {\n        const tripReports = response.data;\n        dispatch(fetchNextTripReportsFulfilled(tripReports));\n      })\n      .catch(err => {\n        dispatch(fetchNextTripReportsRejected());\n        dispatch({type: \"ADD_ERROR\", error: err});\n      })\n  }\n}\n\n/*\nGET requests the Django REST API with the parameter of username to return the\nfirst page of the list of the Users TripReports.\n*/\nexport const fetchUserTripReports = (username) => {\n  return dispatch => {\n    dispatch(fetchUserTripReportsPending());\n    axios.get(`${process.env.REACT_APP_API_URL}/api/v1/reports/?ordering=-pk&search=${username}`)\n      .then(response => {\n        const tripReports = response.data;\n        dispatch(fetchUserTripReportsFulfilled(tripReports));\n      })\n      .catch(err => {\n        dispatch(fetchUserTripReportsRejected());\n        dispatch({type: \"ADD_ERROR\", error: err});\n      })\n  }\n}\n\n/*\nAgain, the paginated API returns a next variable that is the url to the next\npage, which is passed into this function to retrieve the next page of the user's\nTrip Reports.\n*/\nexport const fetchNextUserTripReports = (url) => {\n  return dispatch => {\n    dispatch(fetchNextUserTripReportsPending());\n    axios.get(url)\n      .then(response => {\n        const tripReports = response.data;\n        dispatch(fetchNextUserTripReportsFulfilled(tripReports));\n      })\n      .catch(err => {\n        dispatch(fetchNextUserTripReportsRejected());\n        dispatch({type: \"ADD_ERROR\", error: err});\n      })\n  }\n}\n\n/*\nPOST requests a new trip report to the Django REST API by the authenticated\nuser.\n*/\nexport const postTripReport = (author, title, content, countries, image) => {\n  const token = localStorage.getItem('token');\n  return dispatch => {\n    dispatch(postTripReportsPending());\n    const formData = new FormData();\n    formData.append('title', title);\n    formData.append('content', content);\n    formData.append('author', author);\n    formData.append('countries', countries);\n    formData.append('image', image);\n    axios.post(\n      `${process.env.REACT_APP_API_URL}/api/v1/reports/`,formData,\n      {headers: { 'Authorization': `Token ${token}`}}\n    )\n      .then(response => {\n        dispatch(postTripReportsFulfilled(response.data));\n      })\n      .catch(err => {\n        dispatch(postTripReportsRejected());\n        dispatch({type: \"ADD_ERROR\", error: err});\n      })\n  }\n}\n\n// DELETES a post of the authenticated user on the API.\nexport const deleteTripReport = (tripReport) => {\n  const token = localStorage.getItem('token');\n  return dispatch => {\n    dispatch(deleteTripReportsPending());\n    axios.delete(`${process.env.REACT_APP_API_URL}/api/v1/reports/${tripReport.id}/`, {headers: {\n      'X-Requested-With': 'XMLHttpRequest',\n      'X-CSRFToken': 'csrftoken',\n      'Authorization': `Token ${token}`\n    }})\n      .then(response => {\n        dispatch(deleteTripReportsFulfilled(tripReport));\n        dispatch({type: \"ADD_SUCCESS\", success: 'Your post has been deleted.'});\n      })\n      .catch(err => {\n        dispatch(deleteTripReportsRejected());\n        dispatch({type: \"ADD_ERROR\", error: err});\n      })\n  }\n}\n\n// UPDATEs a post of the authenticated user on the API.\nexport const updateTripReport = (tripReport, author, title, content, countries, image) => {\n  const token = localStorage.getItem('token');\n  return dispatch => {\n    dispatch(updateTripReportsPending());\n    const formData = new FormData();\n    formData.append('title', title);\n    formData.append('content', content);\n    formData.append('author', author);\n    formData.append('countries', countries);\n    // If image is field is left blank, the original image does not get updated or deleted.\n    if (image) {\n      formData.append('image', image);\n    }\n    axios.patch(`${process.env.REACT_APP_API_URL}/api/v1/reports/${tripReport}/`, formData,\n      {headers: {\n        'X-Requested-With': 'XMLHttpRequest',\n        'X-CSRFToken': 'csrftoken',\n        'Authorization': `Token ${token}`\n    }})\n      .then(response => {\n        dispatch(updateTripReportsFulfilled(response.data));\n        dispatch({type: \"ADD_SUCCESS\", success: 'Your post has been updated.'});\n      })\n      .catch(err => {\n        dispatch(updateTripReportsRejected());\n        dispatch({type: \"ADD_ERROR\", error: err});\n      })\n  }\n}\n\n/*\nFetches a single Trip Report based on slug to display on the posts /p/${slug}/\npage.\n*/\nexport const fetchSlugTripReports = (slug) => {\n  return dispatch => {\n    dispatch(fetchSlugTripReportsPending());\n    axios.get(`${process.env.REACT_APP_API_URL}/api/v1/reports/?search=${slug}`)\n      .then(response => {\n        const tripReports = response.data;\n        dispatch(fetchSlugTripReportsFulfilled(tripReports));\n      })\n      .catch(err => {\n        dispatch(fetchSlugTripReportsRejected());\n        dispatch({type: \"ADD_ERROR\", error: err});\n      })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}