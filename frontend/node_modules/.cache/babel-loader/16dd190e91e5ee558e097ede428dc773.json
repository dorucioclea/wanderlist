{"ast":null,"code":"import _classCallCheck from \"/Users/peterzernia/projects/countries/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/peterzernia/projects/countries/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/peterzernia/projects/countries/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/peterzernia/projects/countries/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/peterzernia/projects/countries/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/peterzernia/projects/countries/src/containers/Post.js\";\nimport React, { Component } from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { PropTypes } from 'prop-types';\nimport CountryModal from '../components/CountryModal';\nimport TripReport from '../components/TripReport';\nimport { openCountryModal, closeCountryModal } from '../actions/modalActions';\nimport { fetchSlugTripReports } from '../actions/tripReportActions';\nimport { removeError } from '../actions/errorActions';\nimport { DotLoader } from 'react-spinners';\n\nvar Post =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Post, _Component);\n\n  function Post() {\n    _classCallCheck(this, Post);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Post).apply(this, arguments));\n  }\n\n  _createClass(Post, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var slug = this.props.match.params.slug;\n      this.props.fetchSlugTripReports(slug);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.props.removeError();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      var listTripReports = null;\n\n      if (this.props.tripReports) {\n        listTripReports = this.props.tripReports.map(function (tripReport) {\n          return React.createElement(\"div\", {\n            key: tripReport.id,\n            style: {\n              marginBottom: 20\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 28\n            },\n            __self: this\n          }, React.createElement(TripReport, Object.assign({}, tripReport, {\n            openCountryModal: _this.props.openCountryModal,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 29\n            },\n            __self: this\n          })));\n        });\n      }\n\n      return React.createElement(\"div\", {\n        className: \"content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, this.props.fetched && React.createElement(CountryModal, Object.assign({}, this.props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      })), listTripReports);\n    }\n  }]);\n\n  return Post;\n}(Component);\n\nvar mapState = function mapState(state) {\n  return {\n    tripReport: state.tripReport.slugTripReports.results,\n    fetched: state.tripReport.fetchedSlugTripReports\n  };\n};\n\nvar mapDispatch = function mapDispatch(dispatch) {\n  return bindActionCreators({\n    fetchSlugTripReports: fetchSlugTripReports,\n    removeError: removeError\n  }, dispatch);\n};\n\nexport default connect(mapState, mapDispatch)(Post);\nPost.propTypes = {\n  tripReport: PropTypes.object,\n  fetched: PropTypes.bool,\n  fetchSlugTripReports: PropTypes.func,\n  removeError: PropTypes.func\n};","map":{"version":3,"sources":["/Users/peterzernia/projects/countries/src/containers/Post.js"],"names":["React","Component","bindActionCreators","connect","PropTypes","CountryModal","TripReport","openCountryModal","closeCountryModal","fetchSlugTripReports","removeError","DotLoader","Post","slug","props","match","params","listTripReports","tripReports","map","tripReport","id","marginBottom","fetched","mapState","state","slugTripReports","results","fetchedSlugTripReports","mapDispatch","dispatch","propTypes","object","bool","func"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,kBAAT,QAAmC,OAAnC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,SAAT,QAA0B,YAA1B;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,SAASC,gBAAT,EAA2BC,iBAA3B,QAAoD,yBAApD;AACA,SAASC,oBAAT,QAAqC,8BAArC;AACA,SAASC,WAAT,QAA4B,yBAA5B;AACA,SAASC,SAAT,QAA0B,gBAA1B;;IAEMC,I;;;;;;;;;;;;;wCAEiB;AAAA,UACXC,IADW,GACF,KAAKC,KAAL,CAAWC,KAAX,CAAiBC,MADf,CACXH,IADW;AAEnB,WAAKC,KAAL,CAAWL,oBAAX,CAAgCI,IAAhC;AACD;;;2CAEsB;AACrB,WAAKC,KAAL,CAAWJ,WAAX;AACD;;;6BAEO;AAAA;;AAEN,UAAIO,eAAe,GAAG,IAAtB;;AACA,UAAI,KAAKH,KAAL,CAAWI,WAAf,EAA2B;AACzBD,QAAAA,eAAe,GAAG,KAAKH,KAAL,CAAWI,WAAX,CAAuBC,GAAvB,CAA2B,UAAAC,UAAU;AAAA,iBACrD;AAAK,YAAA,GAAG,EAAEA,UAAU,CAACC,EAArB;AAAyB,YAAA,KAAK,EAAE;AAAEC,cAAAA,YAAY,EAAE;AAAhB,aAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACE,oBAAC,UAAD,oBAAgBF,UAAhB;AAA4B,YAAA,gBAAgB,EAAE,KAAI,CAACN,KAAL,CAAWP,gBAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,CADqD;AAAA,SAArC,CAAlB;AAKD;;AAED,aACE;AAAK,QAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,KAAKO,KAAL,CAAWS,OAAX,IAAsB,oBAAC,YAAD,oBAAkB,KAAKT,KAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADzB,EAEGG,eAFH,CADF;AAMD;;;;EA5BgBhB,S;;AA+BnB,IAAMuB,QAAQ,GAAG,SAAXA,QAAW,CAAAC,KAAK,EAAI;AACxB,SAAO;AACLL,IAAAA,UAAU,EAAEK,KAAK,CAACL,UAAN,CAAiBM,eAAjB,CAAiCC,OADxC;AAELJ,IAAAA,OAAO,EAAEE,KAAK,CAACL,UAAN,CAAiBQ;AAFrB,GAAP;AAID,CALD;;AAOA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAAAC,QAAQ,EAAI;AAC9B,SAAO5B,kBAAkB,CAAC;AACxBO,IAAAA,oBAAoB,EAApBA,oBADwB;AAExBC,IAAAA,WAAW,EAAXA;AAFwB,GAAD,EAGtBoB,QAHsB,CAAzB;AAID,CALD;;AAOA,eAAe3B,OAAO,CAACqB,QAAD,EAAWK,WAAX,CAAP,CAA+BjB,IAA/B,CAAf;AAEAA,IAAI,CAACmB,SAAL,GAAiB;AACfX,EAAAA,UAAU,EAAEhB,SAAS,CAAC4B,MADP;AAEfT,EAAAA,OAAO,EAAEnB,SAAS,CAAC6B,IAFJ;AAGfxB,EAAAA,oBAAoB,EAAEL,SAAS,CAAC8B,IAHjB;AAIfxB,EAAAA,WAAW,EAAEN,SAAS,CAAC8B;AAJR,CAAjB","sourcesContent":["import React, { Component } from 'react'\nimport { bindActionCreators } from 'redux'\nimport { connect } from 'react-redux'\nimport { PropTypes } from 'prop-types'\nimport CountryModal from '../components/CountryModal'\nimport TripReport from '../components/TripReport'\nimport { openCountryModal, closeCountryModal } from '../actions/modalActions'\nimport { fetchSlugTripReports } from '../actions/tripReportActions'\nimport { removeError } from '../actions/errorActions'\nimport { DotLoader } from 'react-spinners'\n\nclass Post extends Component {\n\n  componentDidMount () {\n    const { slug } = this.props.match.params\n    this.props.fetchSlugTripReports(slug);\n  }\n\n  componentWillUnmount() {\n    this.props.removeError();\n  }\n\n  render(){\n\n    let listTripReports = null;\n    if (this.props.tripReports){\n      listTripReports = this.props.tripReports.map(tripReport =>(\n        <div key={tripReport.id} style={{ marginBottom: 20 }}>\n          <TripReport {...tripReport} openCountryModal={this.props.openCountryModal}/>\n        </div>\n      ));\n    }\n\n    return(\n      <div className=\"content\">\n        {this.props.fetched && <CountryModal {...this.props} />}\n        {listTripReports}\n      </div>\n    );\n  }\n}\n\nconst mapState = state => {\n  return {\n    tripReport: state.tripReport.slugTripReports.results,\n    fetched: state.tripReport.fetchedSlugTripReports,\n  };\n}\n\nconst mapDispatch = dispatch => {\n  return bindActionCreators({\n    fetchSlugTripReports,\n    removeError\n  }, dispatch);\n}\n\nexport default connect(mapState, mapDispatch)(Post);\n\nPost.propTypes = {\n  tripReport: PropTypes.object,\n  fetched: PropTypes.bool,\n  fetchSlugTripReports: PropTypes.func,\n  removeError: PropTypes.func\n};\n"]},"metadata":{},"sourceType":"module"}