{"ast":null,"code":"import _classCallCheck from \"/Users/peterzernia/projects/countries/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/peterzernia/projects/countries/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/peterzernia/projects/countries/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/peterzernia/projects/countries/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/peterzernia/projects/countries/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/peterzernia/projects/countries/src/containers/Search.js\";\nimport React, { Component } from 'react';\nimport { bindActionCreators } from 'redux';\nimport PropTypes from 'prop-types';\nimport CountryModal from '../components/CountryModal';\nimport Results from '../components/Results';\nimport SearchBar from '../components/SearchBar';\nimport { connect } from 'react-redux';\nimport { fetchCountry } from '../actions/countryActions';\nimport { putUserData } from '../actions/userActions';\nimport { openCountryModal, closeCountryModal } from '../actions/modalActions';\nimport { DotLoader } from 'react-spinners';\n\nvar Search =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Search, _Component);\n\n  function Search() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Search);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Search)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.handleSubmit = function (e) {\n      e.preventDefault();\n\n      _this.props.fetchCountry(e.target.country.value);\n    };\n\n    _this.handleClick = function (e) {\n      e.preventDefault(); // Resets newCountry to null at the beginning of every function call.\n\n      var newCountry = null;\n      var newCountryList;\n      newCountry = Number(e.currentTarget.id); // If the userCountries array is empty, the new array just becomes the newCountry.\n\n      if (_this.props.userCountries.length === 0) {\n        newCountryList = [newCountry];\n      } else {\n        // The newCountryList becomes the userCountries converted from object to just id.\n        newCountryList = _this.props.userCountries;\n        newCountryList = newCountryList.map(function (country) {\n          return country.id;\n        }); // If country is not in the userCountries, it gets added.\n\n        if (newCountryList.findIndex(function (country) {\n          return country === newCountry;\n        }) === -1) {\n          newCountryList = newCountryList.concat([newCountry]); // If country is in the userCountries, it gets deleted.\n        } else {\n          var index = newCountryList.findIndex(function (country) {\n            return country === newCountry;\n          }); // If the index === -1, it means the country is not in the array.\n\n          if (index !== -1) {\n            newCountryList.splice(index, 1);\n          }\n        }\n      } // Makes the PUT request.\n\n\n      _this.props.putUserData(_this.props.username, _this.props.email, newCountryList, _this.props.home.id, _this.props.biography);\n    };\n\n    return _this;\n  }\n\n  _createClass(Search, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var listCountries = this.props.searchedCountry.map(function (country) {\n        return React.createElement(\"div\", {\n          key: country.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60\n          },\n          __self: this\n        }, React.createElement(Results, Object.assign({}, _this2.props, {\n          country: country,\n          handleClick: _this2.handleClick,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60\n          },\n          __self: this\n        })), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60\n          },\n          __self: this\n        }));\n      });\n      return React.createElement(\"div\", {\n        className: \"content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, React.createElement(SearchBar, {\n        handleSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }), \" \", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }), this.props.fetching && React.createElement(DotLoader, {\n        size: 50,\n        color: '#2196f3',\n        className: \"content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }), this.props.fetched && React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, listCountries), this.props.modalCountry && React.createElement(CountryModal, Object.assign({}, this.props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return Search;\n}(Component);\n\nvar mapState = function mapState(state) {\n  return {\n    username: state.user.user.username,\n    email: state.user.user.email,\n    home: state.user.user.home,\n    biography: state.user.user.biography,\n    userCountries: state.user.user.countries,\n    authenticated: state.auth.authenticated,\n    searchedCountry: state.country.country,\n    fetched: state.country.fetched,\n    fetching: state.country.fetching,\n    showCountryModal: state.modal.showCountryModal,\n    modalCountry: state.modal.modalCountry\n  };\n};\n\nvar mapDispatch = function mapDispatch(dispatch) {\n  return bindActionCreators({\n    fetchCountry: fetchCountry,\n    putUserData: putUserData,\n    openCountryModal: openCountryModal,\n    closeCountryModal: closeCountryModal\n  }, dispatch);\n};\n\nexport default connect(mapState, mapDispatch)(Search);\nSearch.propTypes = {\n  username: PropTypes.string,\n  email: PropTypes.string,\n  home: PropTypes.object,\n  biography: PropTypes.string,\n  userCountries: PropTypes.array,\n  authenticated: PropTypes.bool,\n  searchedCountry: PropTypes.array,\n  fetched: PropTypes.bool,\n  fetching: PropTypes.bool,\n  showCountryModal: PropTypes.bool,\n  modalCountry: PropTypes.object,\n  fetchCountry: PropTypes.func,\n  putUserData: PropTypes.func,\n  openCountryModal: PropTypes.func,\n  closeCountryModal: PropTypes.func\n};","map":{"version":3,"sources":["/Users/peterzernia/projects/countries/src/containers/Search.js"],"names":["React","Component","bindActionCreators","PropTypes","CountryModal","Results","SearchBar","connect","fetchCountry","putUserData","openCountryModal","closeCountryModal","DotLoader","Search","handleSubmit","e","preventDefault","props","target","country","value","handleClick","newCountry","newCountryList","Number","currentTarget","id","userCountries","length","map","findIndex","concat","index","splice","username","email","home","biography","listCountries","searchedCountry","fetching","fetched","modalCountry","mapState","state","user","countries","authenticated","auth","showCountryModal","modal","mapDispatch","dispatch","propTypes","string","object","array","bool","func"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { bindActionCreators } from 'redux'\nimport PropTypes from 'prop-types'\nimport CountryModal from '../components/CountryModal'\nimport Results from '../components/Results'\nimport SearchBar from '../components/SearchBar'\nimport { connect } from 'react-redux'\nimport { fetchCountry } from '../actions/countryActions'\nimport { putUserData } from '../actions/userActions'\nimport { openCountryModal, closeCountryModal } from '../actions/modalActions'\nimport { DotLoader } from 'react-spinners'\n\nclass Search extends Component {\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.props.fetchCountry(e.target.country.value);\n  }\n\n  // This function handles making the new userCountries array and PUT requesting\n  // the array to the Django backend.\n  handleClick = (e) => {\n    e.preventDefault();\n    // Resets newCountry to null at the beginning of every function call.\n    let newCountry = null;\n    let newCountryList\n    newCountry =  Number(e.currentTarget.id)\n    // If the userCountries array is empty, the new array just becomes the newCountry.\n    if (this.props.userCountries.length === 0) {\n      newCountryList = [newCountry]\n    } else {\n      // The newCountryList becomes the userCountries converted from object to just id.\n      newCountryList = this.props.userCountries;\n      newCountryList = newCountryList.map(country => country.id);\n      // If country is not in the userCountries, it gets added.\n      if (newCountryList.findIndex(country => country === newCountry) === -1) {\n      newCountryList = newCountryList.concat([newCountry]);\n      // If country is in the userCountries, it gets deleted.\n      } else {\n        let index = newCountryList.findIndex(country => country === newCountry);\n        // If the index === -1, it means the country is not in the array.\n        if (index !== -1){\n          newCountryList.splice(index, 1);\n        }\n      }\n    }\n    // Makes the PUT request.\n    this.props.putUserData(\n      this.props.username,\n      this.props.email,\n      newCountryList,\n      this.props.home.id,\n      this.props.biography\n    );\n  }\n\n  render() {\n\n    const listCountries = this.props.searchedCountry.map(country =>(\n      <div key={country.id}><Results {...this.props} country={country} handleClick={this.handleClick}/><br/></div>\n    ));\n\n      return (\n        <div className=\"content\">\n          <SearchBar handleSubmit={this.handleSubmit} /> <br/>\n          {this.props.fetching && <DotLoader size={50} color={'#2196f3'} className=\"content\" />}\n          {this.props.fetched && <div>{listCountries}</div>}\n          {this.props.modalCountry && <CountryModal {...this.props} />}\n        </div>\n      );\n  }\n}\n\nconst mapState = state => {\n  return {\n    username: state.user.user.username,\n    email: state.user.user.email,\n    home: state.user.user.home,\n    biography: state.user.user.biography,\n    userCountries: state.user.user.countries,\n    authenticated: state.auth.authenticated,\n    searchedCountry: state.country.country,\n    fetched: state.country.fetched,\n    fetching: state.country.fetching,\n    showCountryModal: state.modal.showCountryModal,\n    modalCountry: state.modal.modalCountry\n  };\n};\n\nconst mapDispatch = dispatch => {\n  return bindActionCreators({\n    fetchCountry,\n    putUserData,\n    openCountryModal,\n    closeCountryModal\n  }, dispatch);\n};\n\nexport default connect(mapState, mapDispatch)(Search);\n\nSearch.propTypes = {\n  username: PropTypes.string,\n  email: PropTypes.string,\n  home: PropTypes.object,\n  biography: PropTypes.string,\n  userCountries: PropTypes.array,\n  authenticated: PropTypes.bool,\n  searchedCountry: PropTypes.array,\n  fetched: PropTypes.bool,\n  fetching: PropTypes.bool,\n  showCountryModal: PropTypes.bool,\n  modalCountry: PropTypes.object,\n  fetchCountry: PropTypes.func,\n  putUserData: PropTypes.func,\n  openCountryModal: PropTypes.func,\n  closeCountryModal: PropTypes.func\n};\n"]},"metadata":{},"sourceType":"module"}