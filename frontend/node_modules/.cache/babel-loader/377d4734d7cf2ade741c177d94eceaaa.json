{"ast":null,"code":"import _classCallCheck from \"/Users/peterzernia/projects/countries/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/peterzernia/projects/countries/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/peterzernia/projects/countries/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/peterzernia/projects/countries/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/peterzernia/projects/countries/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/peterzernia/projects/countries/src/containers/Post.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport PostModal from '../components/PostModal';\nimport TripReport from '../components/TripReport';\nimport { fetchUserTripReports as _fetchUserTripReports, postTripReport as _postTripReport, deleteTripReport as _deleteTripReport, updateTripReport as _updateTripReport } from '../actions/tripReportActions';\nimport { openPostModal as _openPostModal, closePostModal as _closePostModal, openUpdatePostModal as _openUpdatePostModal } from '../actions/modalActions';\nimport { DotLoader } from 'react-spinners';\nimport Button from '@material-ui/core/Button';\n\nvar Post =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Post, _Component);\n\n  function Post() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Post);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Post)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.handlePostSubmit = function (e) {\n      e.preventDefault();\n      var options = e.target.countries.options;\n      var countries = [];\n\n      for (var i = 0, l = options.length; i < l; i++) {\n        if (options[i].selected) {\n          countries.push(options[i].value);\n        }\n      }\n\n      _this.props.postTripReport(_this.props.username, e.target.title.value, e.target.content.value, countries);\n\n      _this.props.closePostModal();\n    };\n\n    _this.handleUpdateSubmit = function (e) {\n      e.preventDefault();\n      var options = e.target.countries.options;\n      var countries = [];\n\n      for (var i = 0, l = options.length; i < l; i++) {\n        if (options[i].selected) {\n          countries.push(options[i].value);\n        }\n      }\n\n      _this.props.updateTripReport(_this.props.modalPost.id, _this.props.username, e.target.title.value, e.target.content.value, countries);\n\n      _this.props.closePostModal();\n    };\n\n    return _this;\n  }\n\n  _createClass(Post, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.fetchUserTripReports(this.props.username);\n    }\n    /*\n    handlPostSubmit will create a new trip report and handleUpdateSubmit will\n    update an existing trip report. Both functions are passed into the Post Modal.\n    If the Post Modal is opened with openPostModal, this.props.updatePostModal\n    remains false and the blank form is displayed, and the submit button will\n    create a new post. If the Post Modal is openeed with openUpdatePostModal,\n    this.props.updatePostModal will flip to true, and the pre-filled in form will\n    display and the submit button will update the existing trip report.\n    */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var errorMessage = null;\n\n      if (this.props.error) {\n        errorMessage = React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 67\n          },\n          __self: this\n        }, this.props.error.message);\n      }\n\n      var listTripReports = this.props.tripReports.map(function (tripReport) {\n        return React.createElement(\"div\", {\n          key: tripReport.id,\n          className: \"trip-report\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71\n          },\n          __self: this\n        }, React.createElement(TripReport, Object.assign({}, tripReport, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 72\n          },\n          __self: this\n        })), React.createElement(Button, {\n          variant: \"contained\",\n          color: \"secondary\",\n          onClick: function onClick() {\n            if (window.confirm('Delete the post?')) {\n              _this2.props.deleteTripReport(tripReport.id);\n            }\n\n            ;\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73\n          },\n          __self: this\n        }, \"Delete\"), React.createElement(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: function onClick() {\n            return _this2.props.openUpdatePostModal(tripReport);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74\n          },\n          __self: this\n        }, \"Update\"));\n      });\n      return React.createElement(\"div\", {\n        className: \"content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, errorMessage, React.createElement(PostModal, Object.assign({}, this.props, {\n        handlePostSubmit: this.handlePostSubmit,\n        handleUpdateSubmit: this.handleUpdateSubmit,\n        errorMessage: this.errorMessage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      })), React.createElement(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        className: \"btn btn-primary\",\n        onClick: this.props.openPostModal,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, \"New Trip Report\"), this.props.fetchingTripReports && React.createElement(DotLoader, {\n        size: 50,\n        color: '#007bff',\n        className: \"content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }), this.props.fetchedTripReports && React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, listTripReports));\n    }\n  }]);\n\n  return Post;\n}(Component);\n\nvar mapState = function mapState(state) {\n  return {\n    error: state.tripReport.error,\n    username: state.user.user.username,\n    showPostModal: state.modal.showPostModal,\n    fetchingTripReports: state.tripReport.fetchingTripReports,\n    fetchedTripReports: state.tripReport.fetchedTripReports,\n    tripReports: state.tripReport.userTripReports,\n    updatePostModal: state.modal.updatePostModal,\n    modalPost: state.modal.modalPost\n  };\n};\n\nvar mapDispatch = function mapDispatch(dispatch) {\n  return {\n    fetchUserTripReports: function fetchUserTripReports(username) {\n      return dispatch(_fetchUserTripReports(username));\n    },\n    postTripReport: function postTripReport(title, content, author, countries) {\n      return dispatch(_postTripReport(title, content, author, countries));\n    },\n    deleteTripReport: function deleteTripReport(tripReport) {\n      return dispatch(_deleteTripReport(tripReport));\n    },\n    updateTripReport: function updateTripReport(tripReport, author, title, content, countries) {\n      return dispatch(_updateTripReport(tripReport, author, title, content, countries));\n    },\n    openPostModal: function openPostModal() {\n      return dispatch(_openPostModal());\n    },\n    closePostModal: function closePostModal() {\n      return dispatch(_closePostModal());\n    },\n    openUpdatePostModal: function openUpdatePostModal(modalPost) {\n      return dispatch(_openUpdatePostModal(modalPost));\n    }\n  };\n};\n\nexport default connect(mapState, mapDispatch)(Post);\nPost.propTypes = {\n  error: PropTypes.object,\n  username: PropTypes.string,\n  showPostModal: PropTypes.bool,\n  fetchingTripReports: PropTypes.bool,\n  fetchedTripReports: PropTypes.bool,\n  tripReports: PropTypes.array,\n  updatePostModal: PropTypes.bool,\n  modalPost: PropTypes.object,\n  fetchUserTripReports: PropTypes.func,\n  postTripReport: PropTypes.func,\n  deleteTripReport: PropTypes.func,\n  updateTripReport: PropTypes.func,\n  openPostModal: PropTypes.func,\n  closePostModal: PropTypes.func,\n  openUpdatePostModal: PropTypes.func\n}; //this.props.updateTripReport(tripReport.id, this.props.username, tripReport.title, tripReport.content, tripReport.countries)","map":{"version":3,"sources":["/Users/peterzernia/projects/countries/src/containers/Post.js"],"names":["React","Component","connect","PropTypes","PostModal","TripReport","fetchUserTripReports","postTripReport","deleteTripReport","updateTripReport","openPostModal","closePostModal","openUpdatePostModal","DotLoader","Button","Post","handlePostSubmit","e","preventDefault","options","target","countries","i","l","length","selected","push","value","props","username","title","content","handleUpdateSubmit","modalPost","id","errorMessage","error","message","listTripReports","tripReports","map","tripReport","window","confirm","fetchingTripReports","fetchedTripReports","mapState","state","user","showPostModal","modal","userTripReports","updatePostModal","mapDispatch","dispatch","author","propTypes","object","string","bool","array","func"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport PropTypes from 'prop-types'\nimport PostModal from '../components/PostModal'\nimport TripReport from '../components/TripReport'\nimport { fetchUserTripReports, postTripReport, deleteTripReport, updateTripReport } from '../actions/tripReportActions'\nimport { openPostModal, closePostModal, openUpdatePostModal } from '../actions/modalActions'\nimport { DotLoader } from 'react-spinners'\nimport Button from '@material-ui/core/Button'\n\nclass Post extends Component {\n\n  componentDidMount() {\n    this.props.fetchUserTripReports(this.props.username);\n  }\n\n/*\nhandlPostSubmit will create a new trip report and handleUpdateSubmit will\nupdate an existing trip report. Both functions are passed into the Post Modal.\nIf the Post Modal is opened with openPostModal, this.props.updatePostModal\nremains false and the blank form is displayed, and the submit button will\ncreate a new post. If the Post Modal is openeed with openUpdatePostModal,\nthis.props.updatePostModal will flip to true, and the pre-filled in form will\ndisplay and the submit button will update the existing trip report.\n*/\n  handlePostSubmit = (e) => {\n    e.preventDefault();\n    var options = e.target.countries.options;\n    var countries =[];\n    for (var i = 0, l = options.length; i < l; i++) {\n      if (options[i].selected) {\n        countries.push(options[i].value);\n      }\n    }\n    this.props.postTripReport(\n      this.props.username,\n      e.target.title.value,\n      e.target.content.value,\n      countries\n    );\n    this.props.closePostModal();\n  }\n\n  handleUpdateSubmit = (e) => {\n    e.preventDefault();\n    var options = e.target.countries.options;\n    var countries =[];\n    for (var i = 0, l = options.length; i < l; i++) {\n      if (options[i].selected) {\n        countries.push(options[i].value);\n      }\n    }\n    this.props.updateTripReport(\n      this.props.modalPost.id,\n      this.props.username,\n      e.target.title.value,\n      e.target.content.value,\n      countries\n    );\n    this.props.closePostModal();\n  }\n\n  render(){\n\n    let errorMessage = null;\n    if (this.props.error) {\n      errorMessage = <p>{this.props.error.message}</p>\n    }\n\n    const listTripReports = this.props.tripReports.map(tripReport =>(\n      <div key={tripReport.id} className='trip-report'>\n        <TripReport {...tripReport} />\n        <Button variant=\"contained\" color=\"secondary\" onClick={() => {if(window.confirm('Delete the post?')) {this.props.deleteTripReport(tripReport.id)};}}>Delete</Button>\n        <Button variant=\"contained\" color=\"primary\" onClick={() => this.props.openUpdatePostModal(tripReport)}>Update</Button>\n      </div>\n    ));\n\n    return(\n      <div className=\"content\">\n        {errorMessage}\n        <PostModal {...this.props} handlePostSubmit={this.handlePostSubmit} handleUpdateSubmit={this.handleUpdateSubmit} errorMessage={this.errorMessage}/>\n        <Button variant=\"contained\" color=\"primary\" className=\"btn btn-primary\" onClick={this.props.openPostModal}>New Trip Report</Button>\n        {this.props.fetchingTripReports && <DotLoader size={50} color={'#007bff'} className=\"content\" />}\n        {this.props.fetchedTripReports && <div>{listTripReports}</div>}\n      </div>\n    );\n  }\n}\n\nconst mapState = state => {\n  return {\n    error: state.tripReport.error,\n    username: state.user.user.username,\n    showPostModal: state.modal.showPostModal,\n    fetchingTripReports: state.tripReport.fetchingTripReports,\n    fetchedTripReports: state.tripReport.fetchedTripReports,\n    tripReports: state.tripReport.userTripReports,\n    updatePostModal: state.modal.updatePostModal,\n    modalPost: state.modal.modalPost,\n  };\n}\n\nconst mapDispatch = dispatch => {\n  return {\n    fetchUserTripReports: (username) => dispatch(fetchUserTripReports(username)),\n    postTripReport: (title, content, author, countries) => dispatch(postTripReport(title, content, author, countries)),\n    deleteTripReport: (tripReport) => dispatch(deleteTripReport(tripReport)),\n    updateTripReport: (tripReport, author, title, content, countries) => dispatch(updateTripReport(tripReport, author, title, content, countries)),\n    openPostModal: () => dispatch(openPostModal()),\n    closePostModal: () => dispatch(closePostModal()),\n    openUpdatePostModal: (modalPost) => dispatch(openUpdatePostModal(modalPost))\n  };\n}\n\nexport default connect(mapState, mapDispatch)(Post);\n\nPost.propTypes = {\n  error: PropTypes.object,\n  username: PropTypes.string,\n  showPostModal: PropTypes.bool,\n  fetchingTripReports: PropTypes.bool,\n  fetchedTripReports: PropTypes.bool,\n  tripReports: PropTypes.array,\n  updatePostModal: PropTypes.bool,\n  modalPost: PropTypes.object,\n  fetchUserTripReports: PropTypes.func,\n  postTripReport: PropTypes.func,\n  deleteTripReport: PropTypes.func,\n  updateTripReport: PropTypes.func,\n  openPostModal: PropTypes.func,\n  closePostModal: PropTypes.func,\n  openUpdatePostModal: PropTypes.func\n};\n\n//this.props.updateTripReport(tripReport.id, this.props.username, tripReport.title, tripReport.content, tripReport.countries)\n"]},"metadata":{},"sourceType":"module"}