{"ast":null,"code":"import _classCallCheck from \"/Users/peterzernia/projects/countries/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/peterzernia/projects/countries/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/peterzernia/projects/countries/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/peterzernia/projects/countries/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/peterzernia/projects/countries/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/peterzernia/projects/countries/src/containers/Post.js\";\nimport React, { Component } from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport PostModal from '../components/PostModal';\nimport TripReportThumbnail from '../components/TripReportThumbnail';\nimport TripReportModal from '../components/TripReportModal';\nimport ConfirmDeleteModal from '../components/ConfirmDeleteModal';\nimport { fetchUserTripReports, postTripReport, deleteTripReport, updateTripReport } from '../actions/tripReportActions';\nimport { openPostModal, closePostModal, openUpdatePostModal, openCountryModal, closeCountryModal, openConfirmDeleteModal, closeConfirmDeleteModal, openTripReportModal, closeTripReportModal } from '../actions/modalActions';\nimport { removeError } from '../actions/errorActions';\nimport { DotLoader } from 'react-spinners';\nimport IconButton from '@material-ui/core/IconButton';\nimport Grid from '@material-ui/core/Grid';\nimport Add from '@material-ui/icons/Add';\nimport Tooltip from '@material-ui/core/Tooltip';\n\nvar Post =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Post, _Component);\n\n  function Post() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Post);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Post)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.handlePostSubmit = function (e) {\n      e.preventDefault(); // e.target.countries.value must be split at the comma and then strings\n      // must be converted into numbers.\n\n      var countries;\n\n      if (e.target.countries.value !== '') {\n        countries = e.target.countries.value.split(',').map(Number);\n      }\n\n      _this.props.postTripReport(_this.props.pk, e.target.title.value, e.target.content.value, countries);\n\n      _this.props.closePostModal();\n    };\n\n    _this.handleUpdateSubmit = function (e) {\n      e.preventDefault();\n      var countries;\n\n      if (e.target.countries.value !== '') {\n        countries = e.target.countries.value.split(',').map(Number);\n      }\n\n      _this.props.updateTripReport(_this.props.modalPost.id, _this.props.pk, e.target.title.value, e.target.content.value, countries);\n\n      _this.props.closePostModal();\n    };\n\n    return _this;\n  }\n\n  _createClass(Post, [{\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.props.removeError();\n    }\n    /*\n    handlPostSubmit will create a new trip report and handleUpdateSubmit will\n    update an existing trip report. Both functions are passed into the Post Modal.\n    If the Post Modal is opened with openPostModal, this.props.updatePostModal\n    remains false and the blank form is displayed, and the submit button will\n    create a new post. If the Post Modal is openeed with openUpdatePostModal,\n    this.props.updatePostModal will flip to true, and the pre-filled in form will\n    display and the submit button will update the existing trip report.\n    */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var listTripReports = this.props.tripReports.map(function (tripReport) {\n        return React.createElement(Grid, {\n          item: true,\n          key: tripReport.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71\n          },\n          __self: this\n        }, React.createElement(TripReportThumbnail, Object.assign({\n          tripReport: tripReport\n        }, _this2.props, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 72\n          },\n          __self: this\n        })));\n      });\n      return React.createElement(\"div\", {\n        className: \"content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, React.createElement(Tooltip, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, React.createElement(IconButton, {\n        variant: \"contained\",\n        \"aria-label\": \"New Trip Report\",\n        onClick: this.props.openPostModal,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, React.createElement(Add, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      })), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      })), React.createElement(PostModal, Object.assign({}, this.props, {\n        handlePostSubmit: this.handlePostSubmit,\n        handleUpdateSubmit: this.handleUpdateSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      })), React.createElement(ConfirmDeleteModal, Object.assign({}, this.props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      })), this.props.modalPost.author && React.createElement(TripReportModal, Object.assign({}, this.props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      })), this.props.fetchingTripReports && React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, React.createElement(DotLoader, {\n        size: 50,\n        color: '#2196f3',\n        className: \"content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      })), this.props.fetchedTripReports && React.createElement(Grid, {\n        container: true,\n        spacing: 24,\n        justify: \"center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, listTripReports));\n    }\n  }]);\n\n  return Post;\n}(Component);\n\nvar mapState = function mapState(state) {\n  return {\n    user: state.user.user,\n    username: state.user.user.username,\n    pk: state.user.user.pk,\n    showPostModal: state.modal.showPostModal,\n    fetchingTripReports: state.tripReport.fetchingTripReports,\n    fetchedTripReports: state.tripReport.fetchedTripReports,\n    tripReports: state.tripReport.userTripReports,\n    updatePostModal: state.modal.updatePostModal,\n    modalPost: state.modal.modalPost,\n    showCountryModal: state.modal.showCountryModal,\n    modalCountry: state.modal.modalCountry,\n    showConfirmDeleteModal: state.modal.showConfirmDeleteModal,\n    showTripReportModal: state.modal.showTripReportModal\n  };\n};\n\nvar mapDispatch = function mapDispatch(dispatch) {\n  return bindActionCreators({\n    fetchUserTripReports: fetchUserTripReports,\n    postTripReport: postTripReport,\n    deleteTripReport: deleteTripReport,\n    updateTripReport: updateTripReport,\n    openPostModal: openPostModal,\n    closePostModal: closePostModal,\n    openUpdatePostModal: openUpdatePostModal,\n    openCountryModal: openCountryModal,\n    closeCountryModal: closeCountryModal,\n    openConfirmDeleteModal: openConfirmDeleteModal,\n    closeConfirmDeleteModal: closeConfirmDeleteModal,\n    openTripReportModal: openTripReportModal,\n    closeTripReportModal: closeTripReportModal,\n    removeError: removeError\n  }, dispatch);\n};\n\nexport default connect(mapState, mapDispatch)(Post);\nPost.propTypes = {\n  user: PropTypes.object,\n  username: PropTypes.string,\n  pk: PropTypes.number,\n  showPostModal: PropTypes.bool,\n  fetchingTripReports: PropTypes.bool,\n  fetchedTripReports: PropTypes.bool,\n  tripReports: PropTypes.array,\n  updatePostModal: PropTypes.bool,\n  modalPost: PropTypes.object,\n  showCountryModal: PropTypes.bool,\n  modalCountry: PropTypes.object,\n  showConfirmDeleteModal: PropTypes.bool,\n  showTripReportModal: PropTypes.bool,\n  fetchUserTripReports: PropTypes.func,\n  postTripReport: PropTypes.func,\n  deleteTripReport: PropTypes.func,\n  updateTripReport: PropTypes.func,\n  openPostModal: PropTypes.func,\n  closePostModal: PropTypes.func,\n  openUpdatePostModal: PropTypes.func,\n  openCountryModal: PropTypes.func,\n  closeCountryModal: PropTypes.func,\n  openConfirmDeleteModal: PropTypes.func,\n  closeConfirmDeleteModal: PropTypes.func,\n  openTripReportModal: PropTypes.func,\n  closeTripReportModal: PropTypes.func\n}; // const listTripReports = this.props.tripReports.map(tripReport =>(\n//   <div key={tripReport.id} className='trip-report'>\n//     <TripReport {...tripReport} openCountryModal={this.props.openCountryModal} />\n//     <Button variant=\"contained\" color=\"primary\" onClick={() => this.props.openUpdatePostModal(tripReport)}>Update</Button>\n//     <Button variant='outlined' color=\"secondary\" onClick={() => this.props.openConfirmDeleteModal(tripReport)}>Delete</Button>\n//   </div>\n// ));","map":{"version":3,"sources":["/Users/peterzernia/projects/countries/src/containers/Post.js"],"names":["React","Component","bindActionCreators","connect","PropTypes","PostModal","TripReportThumbnail","TripReportModal","ConfirmDeleteModal","fetchUserTripReports","postTripReport","deleteTripReport","updateTripReport","openPostModal","closePostModal","openUpdatePostModal","openCountryModal","closeCountryModal","openConfirmDeleteModal","closeConfirmDeleteModal","openTripReportModal","closeTripReportModal","removeError","DotLoader","IconButton","Grid","Add","Tooltip","Post","handlePostSubmit","e","preventDefault","countries","target","value","split","map","Number","props","pk","title","content","handleUpdateSubmit","modalPost","id","listTripReports","tripReports","tripReport","author","fetchingTripReports","fetchedTripReports","mapState","state","user","username","showPostModal","modal","userTripReports","updatePostModal","showCountryModal","modalCountry","showConfirmDeleteModal","showTripReportModal","mapDispatch","dispatch","propTypes","object","string","number","bool","array","func"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { bindActionCreators } from 'redux'\nimport { connect } from 'react-redux'\nimport PropTypes from 'prop-types'\nimport PostModal from '../components/PostModal'\nimport TripReportThumbnail from '../components/TripReportThumbnail'\nimport TripReportModal from '../components/TripReportModal'\nimport ConfirmDeleteModal from '../components/ConfirmDeleteModal'\nimport { fetchUserTripReports, postTripReport, deleteTripReport, updateTripReport } from '../actions/tripReportActions'\nimport { openPostModal, closePostModal, openUpdatePostModal, openCountryModal,\n         closeCountryModal, openConfirmDeleteModal, closeConfirmDeleteModal,\n         openTripReportModal, closeTripReportModal } from '../actions/modalActions'\nimport { removeError } from '../actions/errorActions'\nimport { DotLoader } from 'react-spinners'\nimport IconButton from '@material-ui/core/IconButton'\nimport Grid from '@material-ui/core/Grid'\nimport Add from '@material-ui/icons/Add'\nimport Tooltip from '@material-ui/core/Tooltip';\n\nclass Post extends Component {\n\n  componentWillUnmount() {\n    this.props.removeError();\n  }\n\n  /*\n  handlPostSubmit will create a new trip report and handleUpdateSubmit will\n  update an existing trip report. Both functions are passed into the Post Modal.\n  If the Post Modal is opened with openPostModal, this.props.updatePostModal\n  remains false and the blank form is displayed, and the submit button will\n  create a new post. If the Post Modal is openeed with openUpdatePostModal,\n  this.props.updatePostModal will flip to true, and the pre-filled in form will\n  display and the submit button will update the existing trip report.\n  */\n  handlePostSubmit = (e) => {\n    e.preventDefault();\n    // e.target.countries.value must be split at the comma and then strings\n    // must be converted into numbers.\n    let countries;\n    if (e.target.countries.value !== '') {\n      countries = e.target.countries.value.split(',').map(Number);\n    }\n    this.props.postTripReport(\n      this.props.pk,\n      e.target.title.value,\n      e.target.content.value,\n      countries\n    );\n    this.props.closePostModal();\n  }\n\n  handleUpdateSubmit = (e) => {\n    e.preventDefault();\n    let countries;\n    if (e.target.countries.value !== '') {\n      countries = e.target.countries.value.split(',').map(Number);\n    }\n    this.props.updateTripReport(\n      this.props.modalPost.id,\n      this.props.pk,\n      e.target.title.value,\n      e.target.content.value,\n      countries\n    );\n    this.props.closePostModal();\n  }\n\n  render(){\n\n    const listTripReports = this.props.tripReports.map(tripReport =>(\n      <Grid item key={tripReport.id}>\n        <TripReportThumbnail tripReport={tripReport} {...this.props} />\n      </Grid>\n    ));\n\n    return(\n      <div className=\"content\">\n        <Tooltip>\n          <IconButton variant=\"contained\" aria-label=\"New Trip Report\" onClick={this.props.openPostModal}>\n            <Add />\n          </IconButton><br/><br/>\n        </Tooltip>  \n        <PostModal {...this.props} handlePostSubmit={this.handlePostSubmit} handleUpdateSubmit={this.handleUpdateSubmit} />\n        <ConfirmDeleteModal {...this.props} />\n        {this.props.modalPost.author && <TripReportModal {...this.props} />}\n        {this.props.fetchingTripReports && <div><DotLoader size={50} color={'#2196f3'} className=\"content\" /></div>}\n        {this.props.fetchedTripReports && <Grid container spacing={24} justify='center' >{listTripReports}</Grid>}\n      </div>\n    );\n  }\n}\n\nconst mapState = state => {\n  return {\n    user: state.user.user,\n    username: state.user.user.username,\n    pk: state.user.user.pk,\n    showPostModal: state.modal.showPostModal,\n    fetchingTripReports: state.tripReport.fetchingTripReports,\n    fetchedTripReports: state.tripReport.fetchedTripReports,\n    tripReports: state.tripReport.userTripReports,\n    updatePostModal: state.modal.updatePostModal,\n    modalPost: state.modal.modalPost,\n    showCountryModal: state.modal.showCountryModal,\n    modalCountry: state.modal.modalCountry,\n    showConfirmDeleteModal: state.modal.showConfirmDeleteModal,\n    showTripReportModal: state.modal.showTripReportModal\n  };\n}\n\nconst mapDispatch = dispatch => {\n  return bindActionCreators({\n    fetchUserTripReports,\n    postTripReport,\n    deleteTripReport,\n    updateTripReport,\n    openPostModal,\n    closePostModal,\n    openUpdatePostModal,\n    openCountryModal,\n    closeCountryModal,\n    openConfirmDeleteModal,\n    closeConfirmDeleteModal,\n    openTripReportModal,\n    closeTripReportModal,\n    removeError\n  }, dispatch);\n}\n\nexport default connect(mapState, mapDispatch)(Post);\n\nPost.propTypes = {\n  user: PropTypes.object,\n  username: PropTypes.string,\n  pk: PropTypes.number,\n  showPostModal: PropTypes.bool,\n  fetchingTripReports: PropTypes.bool,\n  fetchedTripReports: PropTypes.bool,\n  tripReports: PropTypes.array,\n  updatePostModal: PropTypes.bool,\n  modalPost: PropTypes.object,\n  showCountryModal: PropTypes.bool,\n  modalCountry: PropTypes.object,\n  showConfirmDeleteModal: PropTypes.bool,\n  showTripReportModal: PropTypes.bool,\n  fetchUserTripReports: PropTypes.func,\n  postTripReport: PropTypes.func,\n  deleteTripReport: PropTypes.func,\n  updateTripReport: PropTypes.func,\n  openPostModal: PropTypes.func,\n  closePostModal: PropTypes.func,\n  openUpdatePostModal: PropTypes.func,\n  openCountryModal: PropTypes.func,\n  closeCountryModal: PropTypes.func,\n  openConfirmDeleteModal: PropTypes.func,\n  closeConfirmDeleteModal: PropTypes.func,\n  openTripReportModal: PropTypes.func,\n  closeTripReportModal: PropTypes.func\n};\n\n// const listTripReports = this.props.tripReports.map(tripReport =>(\n//   <div key={tripReport.id} className='trip-report'>\n//     <TripReport {...tripReport} openCountryModal={this.props.openCountryModal} />\n//     <Button variant=\"contained\" color=\"primary\" onClick={() => this.props.openUpdatePostModal(tripReport)}>Update</Button>\n//     <Button variant='outlined' color=\"secondary\" onClick={() => this.props.openConfirmDeleteModal(tripReport)}>Delete</Button>\n//   </div>\n// ));\n"]},"metadata":{},"sourceType":"module"}