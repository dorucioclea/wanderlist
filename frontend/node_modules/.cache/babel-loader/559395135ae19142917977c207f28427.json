{"ast":null,"code":"import axios from 'axios';\nexport var authStart = function authStart() {\n  return {\n    type: \"AUTH_START\"\n  };\n};\nexport var authSucess = function authSucess(token) {\n  return {\n    type: \"AUTH_SUCESS\",\n    token: token\n  };\n};\nexport var authFail = function authFail(error) {\n  return {\n    type: \"AUTH_FAIL\",\n    error: error\n  };\n};\nexport var authLogout = function authLogout() {\n  localStorage.removeItem('token');\n  localStorage.removeItem('expirationDate');\n  return {\n    type: \"AUTH_LOGOUT\"\n  };\n};\n/*\nCheck to see if the authentication token for the user has expired.\n*/\n\nexport var checkAuthTimeout = function checkAuthTimeout(expirationTime) {\n  return function (dispatch) {\n    setTimeout(function () {\n      dispatch(authLogout());\n    }, expirationTime);\n  };\n};\n/*\nLogin user, setting the token recieved from the backend in the browser\nstorage with an expiration after 1 hour.\n*/\n\nexport var authLogin = function authLogin(username, password) {\n  return function (dispatch) {\n    dispatch(authStart());\n    axios.post('http://localhost:8000/api/v1/rest-auth/login/', {\n      username: username,\n      password: password\n    }).then(function (response) {\n      var token = response.data.key;\n      $window.localStorage.setItem('token', token);\n      dispatch(authSucess(token));\n    }).catch(function (err) {\n      dispatch(authFail(err));\n    });\n  };\n};\nexport var authRegister = function authRegister(username, email, password1, password2) {\n  return function (dispatch) {\n    dispatch(authStart());\n    axios.post('http://localhost:8000/api/v1/rest-auth/registration/', {\n      username: username,\n      email: email,\n      password1: password1,\n      password2: password2\n    }).then(function (response) {\n      var token = response.data.key;\n      var expirationDate = new Date(new Date().getTime() + 3600 * 1000);\n      localStorage.setItem('token', token);\n      localStorage.setItem('expirationDate', expirationDate);\n      dispatch(authSucess(token));\n      dispatch(checkAuthTimeout(3600));\n    }).catch(function (err) {\n      dispatch(authFail(err));\n    });\n  };\n};","map":{"version":3,"sources":["/Users/peterzernia/projects/countries/frontend/src/actions/authActions.js"],"names":["axios","authStart","type","authSucess","token","authFail","error","authLogout","localStorage","removeItem","checkAuthTimeout","expirationTime","dispatch","setTimeout","authLogin","username","password","post","then","response","data","key","$window","setItem","catch","err","authRegister","email","password1","password2","expirationDate","Date","getTime"],"mappings":"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","sourcesContent":["import axios from 'axios'\n\nexport const authStart = () => {\n  return {\n    type: \"AUTH_START\"\n  }\n}\n\nexport const authSucess = token => {\n  return {\n    type: \"AUTH_SUCESS\",\n    token: token\n  }\n}\n\nexport const authFail = error => {\n  return {\n    type: \"AUTH_FAIL\",\n    error: error\n  }\n}\n\nexport const authLogout = () => {\n  localStorage.removeItem('token');\n  localStorage.removeItem('expirationDate');\n  return {\n    type: \"AUTH_LOGOUT\"\n  }\n}\n\n/*\nCheck to see if the authentication token for the user has expired.\n*/\nexport const checkAuthTimeout = expirationTime => {\n  return dispatch => {\n    setTimeout(() => {\n      dispatch(authLogout());\n    }, expirationTime)\n  }\n}\n\n/*\nLogin user, setting the token recieved from the backend in the browser\nstorage with an expiration after 1 hour.\n*/\nexport const authLogin = (username, password) => {\n  return dispatch => {\n    dispatch(authStart());\n    axios.post('http://localhost:8000/api/v1/rest-auth/login/', {\n      username: username,\n      password: password\n    })\n    .then(response => {\n      const token = response.data.key;\n      $window.localStorage.setItem('token', token);\n      dispatch(authSucess(token));\n    })\n    .catch(err => {\n      dispatch(authFail(err));\n    })\n  }\n}\n\nexport const authRegister = (username, email, password1, password2) => {\n  return dispatch => {\n    dispatch(authStart());\n    axios.post('http://localhost:8000/api/v1/rest-auth/registration/', {\n      username: username,\n      email: email,\n      password1: password1,\n      password2: password2\n    })\n    .then(response => {\n      const token = response.data.key;\n      const expirationDate = new Date(new Date().getTime() + 3600 * 1000);\n      localStorage.setItem('token', token);\n      localStorage.setItem('expirationDate', expirationDate);\n      dispatch(authSucess(token));\n      dispatch(checkAuthTimeout(3600));\n    })\n    .catch(err => {\n      dispatch(authFail(err))\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}