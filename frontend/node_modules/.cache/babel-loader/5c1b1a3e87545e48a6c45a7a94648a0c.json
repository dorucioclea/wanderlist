{"ast":null,"code":"import _toConsumableArray from \"/Users/peterzernia/projects/countries/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/peterzernia/projects/countries/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar initialState = {\n  fetching: false,\n  fetched: false,\n  fetchingTripReports: false,\n  fetchedTripReports: false,\n  tripReports: [],\n  userTripReports: []\n};\nexport default function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"FETCH_TRIP_REPORTS_PENDING\":\n      {\n        return _objectSpread({}, state, {\n          fetching: true\n        });\n      }\n\n    case \"FETCH_TRIP_REPORTS_FULFILLED\":\n      {\n        return _objectSpread({}, state, {\n          fetching: false,\n          fetched: true,\n          tripReports: action.tripReports\n        });\n      }\n\n    case \"FETCH_TRIP_REPORTS_REJECTED\":\n      {\n        return _objectSpread({}, state, {\n          fetching: false,\n          fetched: false\n        });\n      }\n\n    case \"FETCH_USER_TRIP_REPORTS_PENDING\":\n      {\n        return _objectSpread({}, state, {\n          fetchingTripReports: true,\n          fetchedTripReports: false\n        });\n      }\n\n    case \"FETCH_USER_TRIP_REPORTS_FULFILLED\":\n      {\n        return _objectSpread({}, state, {\n          fetchingTripReports: false,\n          fetchedTripReports: true,\n          userTripReports: action.tripReports\n        });\n      }\n\n    case \"FETCH_USER_TRIP_REPORTS_REJECTED\":\n      {\n        return _objectSpread({}, state, {\n          fetchingTripReports: false,\n          fetchedTripReports: false\n        });\n      }\n\n    case \"POST_TRIP_REPORTS_PENDING\":\n      {\n        return _objectSpread({}, state);\n      }\n\n    case \"POST_TRIP_REPORTS_FULFILLED\":\n      {\n        return _objectSpread({}, state, {\n          // The new trip report must be added onto the array, then the array must be sorted by id.\n          userTripReports: _toConsumableArray(state.userTripReports).concat(action.response).sort(function (a, b) {\n            return a.id < b.id;\n          }),\n          tripReports: _toConsumableArray(state.tripReports).concat(action.response).sort(function (a, b) {\n            return a.id < b.id;\n          })\n        });\n      }\n\n    case \"POST_TRIP_REPORTS_REJECTED\":\n      {\n        return _objectSpread({}, state);\n      }\n\n    case \"DELETE_TRIP_REPORTS_PENDING\":\n      {\n        return _objectSpread({}, state);\n      }\n\n    case \"DELETE_TRIP_REPORTS_FULFILLED\":\n      {\n        return _objectSpread({}, state, {\n          // The deleted post must be filtered out of the lists.\n          userTripReports: {\n            results: _toConsumableArray(state.userTripReports.results).filter(function (tripReport) {\n              return tripReport.id !== action.response.id;\n            })\n          },\n          tripReports: {\n            results: _toConsumableArray(state.tripReports.results).filter(function (tripReport) {\n              return tripReport.id !== action.response.id;\n            })\n          }\n        });\n      }\n\n    case \"DELETE_TRIP_REPORTS_REJECTED\":\n      {\n        return _objectSpread({}, state);\n      }\n\n    case \"UPDATE_TRIP_REPORTS_PENDING\":\n      {\n        return _objectSpread({}, state);\n      }\n\n    case \"UPDATE_TRIP_REPORTS_FULFILLED\":\n      {\n        return _objectSpread({}, state, {\n          // The old post must be filtered out, the updated post must be added, then the array must be sorted.\n          userTripReports: _toConsumableArray(state.userTripReports).filter(function (tripReport) {\n            return tripReport.id !== action.response.id;\n          }).concat(action.response).sort(function (a, b) {\n            return a.id < b.id;\n          }),\n          tripReports: _toConsumableArray(state.tripReports).filter(function (tripReport) {\n            return tripReport.id !== action.response.id;\n          }).concat(action.response).sort(function (a, b) {\n            return a.id < b.id;\n          })\n        });\n      }\n\n    case \"UPDATE_TRIP_REPORTS_REJECTED\":\n      {\n        return _objectSpread({}, state);\n      }\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/peterzernia/projects/countries/src/store/tripReport.js"],"names":["initialState","fetching","fetched","fetchingTripReports","fetchedTripReports","tripReports","userTripReports","state","action","type","concat","response","sort","a","b","id","results","filter","tripReport"],"mappings":"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","sourcesContent":["const initialState = {\n  fetching: false,\n  fetched: false,\n  fetchingTripReports: false,\n  fetchedTripReports: false,\n  tripReports: [],\n  userTripReports: [],\n}\n\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case \"FETCH_TRIP_REPORTS_PENDING\": {\n      return {\n        ...state,\n        fetching: true,\n      }\n    }\n    case \"FETCH_TRIP_REPORTS_FULFILLED\": {\n      return {\n        ...state,\n        fetching: false,\n        fetched: true,\n        tripReports: action.tripReports,\n      }\n    }\n    case \"FETCH_TRIP_REPORTS_REJECTED\": {\n      return {\n        ...state,\n        fetching: false,\n        fetched: false,\n      }\n    }\n    case \"FETCH_USER_TRIP_REPORTS_PENDING\": {\n      return {\n        ...state,\n        fetchingTripReports: true,\n        fetchedTripReports: false\n      }\n    }\n    case \"FETCH_USER_TRIP_REPORTS_FULFILLED\": {\n      return {\n        ...state,\n        fetchingTripReports: false,\n        fetchedTripReports: true,\n        userTripReports: action.tripReports,\n      }\n    }\n    case \"FETCH_USER_TRIP_REPORTS_REJECTED\": {\n      return {\n        ...state,\n        fetchingTripReports: false,\n        fetchedTripReports: false,\n      }\n    }\n    case \"POST_TRIP_REPORTS_PENDING\": {\n      return {\n        ...state,\n      }\n    }\n    case \"POST_TRIP_REPORTS_FULFILLED\": {\n      return {\n        ...state,\n        // The new trip report must be added onto the array, then the array must be sorted by id.\n        userTripReports: [...state.userTripReports].concat(action.response).sort((a, b) => a.id < b.id),\n        tripReports: [...state.tripReports].concat(action.response).sort((a, b) => a.id < b.id),\n      }\n    }\n    case \"POST_TRIP_REPORTS_REJECTED\": {\n      return {\n        ...state,\n        }\n    }\n    case \"DELETE_TRIP_REPORTS_PENDING\": {\n      return {\n        ...state,\n      }\n    }\n    case \"DELETE_TRIP_REPORTS_FULFILLED\": {\n      return {\n        ...state,\n        // The deleted post must be filtered out of the lists.\n        userTripReports: {\n          results: [...state.userTripReports.results].filter(tripReport => tripReport.id !== action.response.id)\n        },\n        tripReports: {\n          results: [...state.tripReports.results].filter(tripReport => tripReport.id !== action.response.id)\n        }\n      }\n    }\n    case \"DELETE_TRIP_REPORTS_REJECTED\": {\n      return {\n        ...state,\n      }\n    }\n    case \"UPDATE_TRIP_REPORTS_PENDING\": {\n      return {\n        ...state,\n      }\n    }\n    case \"UPDATE_TRIP_REPORTS_FULFILLED\": {\n      return {\n        ...state,\n        // The old post must be filtered out, the updated post must be added, then the array must be sorted.\n        userTripReports: [...state.userTripReports].filter(tripReport => tripReport.id !== action.response.id).concat(action.response).sort((a, b) => a.id < b.id),\n        tripReports: [...state.tripReports].filter(tripReport => tripReport.id !== action.response.id).concat(action.response).sort((a, b) => a.id < b.id),\n      }\n    }\n    case \"UPDATE_TRIP_REPORTS_REJECTED\": {\n      return {\n        ...state,\n      }\n    }\n    default:\n      return state\n  }\n}\n"]},"metadata":{},"sourceType":"module"}