{"ast":null,"code":"import axios from 'axios';\nimport { fetchUser } from './userActions';\nexport var authStart = function authStart() {\n  return {\n    type: \"AUTH_START\"\n  };\n};\nexport var authSucess = function authSucess(token) {\n  return {\n    type: \"AUTH_SUCESS\",\n    token: token\n  };\n};\nexport var authFail = function authFail() {\n  return {\n    type: \"AUTH_FAIL\"\n  };\n};\n/*\nThe token stored in localStorage to authenticate the user is removed, logging\nthe user out.\n*/\n\nexport var authLogout = function authLogout() {\n  localStorage.removeItem('token');\n  localStorage.removeItem('username');\n  return {\n    type: \"AUTH_LOGOUT\"\n  };\n};\n/*\nLogs user in using axios and recieves a token from the Django API. This token\nis stored in localStorage.\n*/\n\nexport var authLogin = function authLogin(username, password) {\n  return function (dispatch) {\n    dispatch({\n      type: \"REMOVE_ERROR\"\n    });\n    dispatch(authStart());\n    axios.post('http://localhost:8000/api/v1/rest-auth/login/', {\n      username: username,\n      password: password\n    }).then(function (response) {\n      var token = response.data.key;\n      localStorage.setItem('token', token);\n      localStorage.setItem('username', username);\n      dispatch(authSucess(token));\n      dispatch(fetchUser());\n    }).catch(function (err) {\n      dispatch(authFail());\n      dispatch({\n        type: \"ADD_ERROR\",\n        error: err\n      });\n    });\n  };\n};\n/*\nSimilar to login, registers a user with the Django REST API which returns a\ntoken to authenticate the user. This token is stored in localStorage.\n*/\n\nexport var authRegister = function authRegister(username, email, password1, password2, home) {\n  return function (dispatch) {\n    dispatch({\n      type: \"REMOVE_ERROR\"\n    });\n    localStorage.removeItem('token');\n    dispatch(authStart());\n    axios.post('http://localhost:8000/api/v1/rest-auth/registration/', {\n      username: username,\n      email: email,\n      password1: password1,\n      password2: password2,\n      home: home\n    }).then(function (response) {\n      var token = response.data.key;\n      localStorage.setItem('token', token);\n      localStorage.setItem('username', username);\n      dispatch(authSucess(token));\n      dispatch(fetchUser());\n    }).catch(function (err) {\n      dispatch(authFail());\n      dispatch({\n        type: \"ADD_ERROR\",\n        error: err\n      });\n    });\n  };\n};\n/*\nChecks to see if the authentication token exists in localStorage. If a token\nexists, it runs the login function. If no token exits it runs the logout\nfunction.\n*/\n\nexport var authCheckState = function authCheckState() {\n  return function (dispatch) {\n    dispatch({\n      type: \"REMOVE_ERROR\"\n    });\n    var token = localStorage.getItem('token');\n\n    if (token === null) {\n      dispatch(authLogout());\n    } else {\n      dispatch(authSucess(token));\n    }\n  };\n};","map":{"version":3,"sources":["/Users/peterzernia/projects/countries/src/actions/authActions.js"],"names":["axios","fetchUser","authStart","type","authSucess","token","authFail","authLogout","localStorage","removeItem","authLogin","username","password","dispatch","post","then","response","data","key","setItem","catch","err","error","authRegister","email","password1","password2","home","authCheckState","getItem"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport { fetchUser } from './userActions'\n\nexport const authStart = () => {\n  return {\n    type: \"AUTH_START\"\n  }\n}\n\nexport const authSucess = token => {\n  return {\n    type: \"AUTH_SUCESS\",\n    token: token\n  }\n}\n\nexport const authFail = () => {\n  return {\n    type: \"AUTH_FAIL\"\n  }\n}\n\n/*\nThe token stored in localStorage to authenticate the user is removed, logging\nthe user out.\n*/\nexport const authLogout = () => {\n  localStorage.removeItem('token');\n  localStorage.removeItem('username');\n  return {\n    type: \"AUTH_LOGOUT\"\n  }\n}\n\n/*\nLogs user in using axios and recieves a token from the Django API. This token\nis stored in localStorage.\n*/\nexport const authLogin = (username, password) => {\n  return dispatch => {\n    dispatch({type: \"REMOVE_ERROR\"});\n    dispatch(authStart());\n    axios.post('http://localhost:8000/api/v1/rest-auth/login/', {\n      username: username,\n      password: password\n    })\n      .then(response => {\n        const token = response.data.key;\n        localStorage.setItem('token', token);\n        localStorage.setItem('username', username);\n        dispatch(authSucess(token));\n        dispatch(fetchUser());\n      })\n      .catch(err => {\n        dispatch(authFail());\n        dispatch({type: \"ADD_ERROR\", error: err});\n      })\n  }\n}\n\n/*\nSimilar to login, registers a user with the Django REST API which returns a\ntoken to authenticate the user. This token is stored in localStorage.\n*/\nexport const authRegister = (username, email, password1, password2, home) => {\n  return dispatch => {\n    dispatch({type: \"REMOVE_ERROR\"});\n    localStorage.removeItem('token');\n    dispatch(authStart());\n    axios.post('http://localhost:8000/api/v1/rest-auth/registration/', {\n      username: username,\n      email: email,\n      password1: password1,\n      password2: password2,\n      home: home\n    })\n      .then(response => {\n        const token = response.data.key;\n        localStorage.setItem('token', token);\n        localStorage.setItem('username', username);\n        dispatch(authSucess(token));\n        dispatch(fetchUser());\n      })\n      .catch(err => {\n        dispatch(authFail());\n        dispatch({type: \"ADD_ERROR\", error: err});\n      })\n  }\n}\n\n/*\nChecks to see if the authentication token exists in localStorage. If a token\nexists, it runs the login function. If no token exits it runs the logout\nfunction.\n*/\nexport const authCheckState = () => {\n  return dispatch => {\n    dispatch({type: \"REMOVE_ERROR\"});\n    const token = localStorage.getItem('token');\n    if (token === null) {\n      dispatch(authLogout());\n    } else {\n      dispatch(authSucess(token));\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}