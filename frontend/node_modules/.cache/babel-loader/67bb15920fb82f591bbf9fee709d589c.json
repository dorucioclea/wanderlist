{"ast":null,"code":"import _classCallCheck from \"/Users/peterzernia/projects/countries/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/peterzernia/projects/countries/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/peterzernia/projects/countries/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/peterzernia/projects/countries/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/peterzernia/projects/countries/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/peterzernia/projects/countries/src/containers/Post.js\";\nimport React, { Component } from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport CountryModal from '../components/CountryModal';\nimport PostModal from '../components/PostModal';\nimport TripReport from '../components/TripReport';\nimport ConfirmDeleteModal from '../components/ConfirmDeleteModal';\nimport { fetchUserTripReports, postTripReport, deleteTripReport, updateTripReport } from '../actions/tripReportActions';\nimport { openPostModal, closePostModal, openUpdatePostModal, openCountryModal, closeCountryModal, openConfirmDeleteModal, closeConfirmDeleteModal, openTripReportModal, closeTripReportModal } from '../actions/modalActions';\nimport { DotLoader } from 'react-spinners';\nimport Button from '@material-ui/core/Button';\n\nvar Post =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Post, _Component);\n\n  function Post() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Post);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Post)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.handlePostSubmit = function (e) {\n      e.preventDefault();\n      var countries = []; // e.target.value must be converted into an array of numbers.\n\n      for (var i = 0, l = e.target.countries.value.length; i < l; i++) {\n        // It contains commas, which must be removed.\n        if (!isNaN(Number(e.target.countries.value[i]))) {\n          countries.push(Number(e.target.countries.value[i]));\n        }\n      }\n\n      _this.props.postTripReport(_this.props.pk, e.target.title.value, e.target.content.value, countries);\n\n      _this.props.closePostModal();\n    };\n\n    _this.handleUpdateSubmit = function (e) {\n      e.preventDefault();\n      var countries = []; // e.target.value must be converted into an array of numbers.\n\n      for (var i = 0, l = e.target.countries.value.length; i < l; i++) {\n        // It contains commas, which must be removed.\n        if (!isNaN(Number(e.target.countries.value[i]))) {\n          countries.push(Number(e.target.countries.value[i]));\n        }\n      }\n\n      _this.props.updateTripReport(_this.props.modalPost.id, _this.props.pk, e.target.title.value, e.target.content.value, countries);\n\n      _this.props.closePostModal();\n    };\n\n    return _this;\n  }\n\n  _createClass(Post, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var listTripReports = this.props.tripReports.map(function (tripReport) {\n        return React.createElement(\"div\", {\n          key: tripReport.id,\n          className: \"trip-report\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 69\n          },\n          __self: this\n        }, React.createElement(Button, {\n          onClick: function onClick() {\n            return _this2.props.openTripReportModal(tripReport);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70\n          },\n          __self: this\n        }, tripReport.id));\n      });\n      return React.createElement(\"div\", {\n        className: \"content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, React.createElement(PostModal, Object.assign({}, this.props, {\n        handlePostSubmit: this.handlePostSubmit,\n        handleUpdateSubmit: this.handleUpdateSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      })), React.createElement(CountryModal, Object.assign({}, this.props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      })), React.createElement(ConfirmDeleteModal, Object.assign({}, this.props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      })), React.createElement(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        className: \"btn btn-primary\",\n        onClick: this.props.openPostModal,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, \"New Trip Report\"), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }), this.props.fetchingTripReports && React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, React.createElement(DotLoader, {\n        size: 50,\n        color: '#2196f3',\n        className: \"content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      })), this.props.fetchedTripReports && React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, listTripReports));\n    }\n  }]);\n\n  return Post;\n}(Component);\n\nvar mapState = function mapState(state) {\n  return {\n    user: state.user.user,\n    username: state.user.user.username,\n    pk: state.user.user.pk,\n    showPostModal: state.modal.showPostModal,\n    fetchingTripReports: state.tripReport.fetchingTripReports,\n    fetchedTripReports: state.tripReport.fetchedTripReports,\n    tripReports: state.tripReport.userTripReports,\n    updatePostModal: state.modal.updatePostModal,\n    modalPost: state.modal.modalPost,\n    showCountryModal: state.modal.showCountryModal,\n    modalCountry: state.modal.modalCountry,\n    showConfirmDeleteModal: state.modal.showConfirmDeleteModal,\n    showTripReportModal: state.modal.showTripReportModal\n  };\n};\n\nvar mapDispatch = function mapDispatch(dispatch) {\n  return bindActionCreators({\n    fetchUserTripReports: fetchUserTripReports,\n    postTripReport: postTripReport,\n    deleteTripReport: deleteTripReport,\n    updateTripReport: updateTripReport,\n    openPostModal: openPostModal,\n    closePostModal: closePostModal,\n    openUpdatePostModal: openUpdatePostModal,\n    openCountryModal: openCountryModal,\n    closeCountryModal: closeCountryModal,\n    openConfirmDeleteModal: openConfirmDeleteModal,\n    closeConfirmDeleteModal: closeConfirmDeleteModal,\n    openTripReportModal: openTripReportModal,\n    closeTripReportModal: closeTripReportModal\n  }, dispatch);\n};\n\nexport default connect(mapState, mapDispatch)(Post);\nPost.propTypes = {\n  user: PropTypes.object,\n  username: PropTypes.string,\n  pk: PropTypes.number,\n  showPostModal: PropTypes.bool,\n  fetchingTripReports: PropTypes.bool,\n  fetchedTripReports: PropTypes.bool,\n  tripReports: PropTypes.array,\n  updatePostModal: PropTypes.bool,\n  modalPost: PropTypes.object,\n  showCountryModal: PropTypes.bool,\n  modalCountry: PropTypes.object,\n  showConfirmDeleteModal: PropTypes.bool,\n  fetchUserTripReports: PropTypes.func,\n  postTripReport: PropTypes.func,\n  deleteTripReport: PropTypes.func,\n  updateTripReport: PropTypes.func,\n  openPostModal: PropTypes.func,\n  closePostModal: PropTypes.func,\n  openUpdatePostModal: PropTypes.func,\n  openCountryModal: PropTypes.func,\n  closeCountryModal: PropTypes.func,\n  openConfirmDeleteModal: PropTypes.func,\n  closeConfirmDeleteModal: PropTypes.func\n}; //this.props.updateTripReport(tripReport.id, this.props.username, tripReport.title, tripReport.content, tripReport.countries)","map":{"version":3,"sources":["/Users/peterzernia/projects/countries/src/containers/Post.js"],"names":["React","Component","bindActionCreators","connect","PropTypes","CountryModal","PostModal","TripReport","ConfirmDeleteModal","fetchUserTripReports","postTripReport","deleteTripReport","updateTripReport","openPostModal","closePostModal","openUpdatePostModal","openCountryModal","closeCountryModal","openConfirmDeleteModal","closeConfirmDeleteModal","openTripReportModal","closeTripReportModal","DotLoader","Button","Post","handlePostSubmit","e","preventDefault","countries","i","l","target","value","length","isNaN","Number","push","props","pk","title","content","handleUpdateSubmit","modalPost","id","listTripReports","tripReports","map","tripReport","fetchingTripReports","fetchedTripReports","mapState","state","user","username","showPostModal","modal","userTripReports","updatePostModal","showCountryModal","modalCountry","showConfirmDeleteModal","showTripReportModal","mapDispatch","dispatch","propTypes","object","string","number","bool","array","func"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { bindActionCreators } from 'redux'\nimport { connect } from 'react-redux'\nimport PropTypes from 'prop-types'\nimport CountryModal from '../components/CountryModal'\nimport PostModal from '../components/PostModal'\nimport TripReport from '../components/TripReport'\nimport ConfirmDeleteModal from '../components/ConfirmDeleteModal'\nimport { fetchUserTripReports, postTripReport, deleteTripReport, updateTripReport } from '../actions/tripReportActions'\nimport { openPostModal, closePostModal, openUpdatePostModal,\n         openCountryModal, closeCountryModal, openConfirmDeleteModal,\n         closeConfirmDeleteModal, openTripReportModal, closeTripReportModal } from '../actions/modalActions'\nimport { DotLoader } from 'react-spinners'\nimport Button from '@material-ui/core/Button'\n\nclass Post extends Component {\n\n  /*\n  handlPostSubmit will create a new trip report and handleUpdateSubmit will\n  update an existing trip report. Both functions are passed into the Post Modal.\n  If the Post Modal is opened with openPostModal, this.props.updatePostModal\n  remains false and the blank form is displayed, and the submit button will\n  create a new post. If the Post Modal is openeed with openUpdatePostModal,\n  this.props.updatePostModal will flip to true, and the pre-filled in form will\n  display and the submit button will update the existing trip report.\n  */\n  handlePostSubmit = (e) => {\n    e.preventDefault();\n    let countries =[];\n    // e.target.value must be converted into an array of numbers.\n    for (let i = 0, l = e.target.countries.value.length; i < l; i++) {\n      // It contains commas, which must be removed.\n      if (!isNaN(Number(e.target.countries.value[i]))){\n        countries.push(Number(e.target.countries.value[i]));\n      }\n    }\n    this.props.postTripReport(\n      this.props.pk,\n      e.target.title.value,\n      e.target.content.value,\n      countries\n    );\n    this.props.closePostModal();\n  }\n\n  handleUpdateSubmit = (e) => {\n    e.preventDefault();\n    let countries =[];\n    // e.target.value must be converted into an array of numbers.\n    for (let i = 0, l = e.target.countries.value.length; i < l; i++) {\n      // It contains commas, which must be removed.\n      if (!isNaN(Number(e.target.countries.value[i]))){\n        countries.push(Number(e.target.countries.value[i]));\n      }\n    }\n    this.props.updateTripReport(\n      this.props.modalPost.id,\n      this.props.pk,\n      e.target.title.value,\n      e.target.content.value,\n      countries\n    );\n    this.props.closePostModal();\n  }\n\n  render(){\n\n    const listTripReports = this.props.tripReports.map(tripReport =>(\n      <div key={tripReport.id} className='trip-report'>\n        <Button onClick={() => this.props.openTripReportModal(tripReport)}>{tripReport.id}</Button>\n      </div>\n    ));\n\n    return(\n      <div className=\"content\">\n        <PostModal {...this.props} handlePostSubmit={this.handlePostSubmit} handleUpdateSubmit={this.handleUpdateSubmit} />\n        <CountryModal {...this.props} />\n        <ConfirmDeleteModal {...this.props} />\n        <Button variant=\"contained\" color=\"primary\" className=\"btn btn-primary\" onClick={this.props.openPostModal}>New Trip Report</Button><br/>\n        {this.props.fetchingTripReports && <div><DotLoader size={50} color={'#2196f3'} className=\"content\" /></div>}\n        {this.props.fetchedTripReports && <div>{listTripReports}</div>}\n      </div>\n    );\n  }\n}\n\nconst mapState = state => {\n  return {\n    user: state.user.user,\n    username: state.user.user.username,\n    pk: state.user.user.pk,\n    showPostModal: state.modal.showPostModal,\n    fetchingTripReports: state.tripReport.fetchingTripReports,\n    fetchedTripReports: state.tripReport.fetchedTripReports,\n    tripReports: state.tripReport.userTripReports,\n    updatePostModal: state.modal.updatePostModal,\n    modalPost: state.modal.modalPost,\n    showCountryModal: state.modal.showCountryModal,\n    modalCountry: state.modal.modalCountry,\n    showConfirmDeleteModal: state.modal.showConfirmDeleteModal,\n    showTripReportModal: state.modal.showTripReportModal\n  };\n}\n\nconst mapDispatch = dispatch => {\n  return bindActionCreators({\n    fetchUserTripReports,\n    postTripReport,\n    deleteTripReport,\n    updateTripReport,\n    openPostModal,\n    closePostModal,\n    openUpdatePostModal,\n    openCountryModal,\n    closeCountryModal,\n    openConfirmDeleteModal,\n    closeConfirmDeleteModal,\n    openTripReportModal,\n    closeTripReportModal\n  }, dispatch);\n}\n\nexport default connect(mapState, mapDispatch)(Post);\n\nPost.propTypes = {\n  user: PropTypes.object,\n  username: PropTypes.string,\n  pk: PropTypes.number,\n  showPostModal: PropTypes.bool,\n  fetchingTripReports: PropTypes.bool,\n  fetchedTripReports: PropTypes.bool,\n  tripReports: PropTypes.array,\n  updatePostModal: PropTypes.bool,\n  modalPost: PropTypes.object,\n  showCountryModal: PropTypes.bool,\n  modalCountry: PropTypes.object,\n  showConfirmDeleteModal: PropTypes.bool,\n  fetchUserTripReports: PropTypes.func,\n  postTripReport: PropTypes.func,\n  deleteTripReport: PropTypes.func,\n  updateTripReport: PropTypes.func,\n  openPostModal: PropTypes.func,\n  closePostModal: PropTypes.func,\n  openUpdatePostModal: PropTypes.func,\n  openCountryModal: PropTypes.func,\n  closeCountryModal: PropTypes.func,\n  openConfirmDeleteModal: PropTypes.func,\n  closeConfirmDeleteModal: PropTypes.func\n};\n\n//this.props.updateTripReport(tripReport.id, this.props.username, tripReport.title, tripReport.content, tripReport.countries)\n"]},"metadata":{},"sourceType":"module"}