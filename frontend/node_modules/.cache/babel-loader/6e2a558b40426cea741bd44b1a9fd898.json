{"ast":null,"code":"import _classCallCheck from \"/Users/peterzernia/projects/countries/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/peterzernia/projects/countries/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/peterzernia/projects/countries/frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/peterzernia/projects/countries/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/peterzernia/projects/countries/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/peterzernia/projects/countries/frontend/src/containers/Search.js\";\nimport React, { Component } from 'react';\nimport Modal from '../components/Modal';\nimport Results from '../components/Results';\nimport SearchBar from '../components/SearchBar';\nimport { connect } from 'react-redux';\nimport { fetchCountry as _fetchCountry } from '../actions/countryActions';\nimport { putCountry as _putCountry } from '../actions/userActions';\nimport { openModal as _openModal, closeModal as _closeModal } from '../actions/modalActions';\nimport { DotLoader } from 'react-spinners';\n\nvar Search =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Search, _Component);\n\n  function Search() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Search);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Search)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.handleSubmit = function (e) {\n      e.preventDefault();\n\n      _this.props.fetchCountry(e.target.country.value);\n    };\n\n    _this.handleClick = function (e) {\n      e.preventDefault();\n      var newCountryList = _this.props.userCountries;\n      var newCountry = _this.props.searchedCountry[e.target.name];\n\n      if (e.target.innerText === 'Add') {\n        newCountryList = _this.props.userCountries.concat([newCountry]);\n      } else {\n        newCountryList = _this.props.userCountries.filter(function (country) {\n          return country !== newCountry;\n        });\n      }\n\n      _this.props.putCountry(_this.props.username, newCountryList);\n    };\n\n    return _this;\n  }\n\n  _createClass(Search, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, React.createElement(SearchBar, {\n        handleSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }), \" \", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }), this.props.fetching ? React.createElement(DotLoader, {\n        size: 50,\n        color: '#007bff',\n        className: \"content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }) : null, this.props.fetched ? React.createElement(Results, Object.assign({\n        handleClick: this.handleClick\n      }, this.props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      })) : null, React.createElement(Modal, Object.assign({}, this.props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return Search;\n}(Component);\n\nvar mapState = function mapState(state) {\n  return {\n    username: state.user.user.username,\n    userCountries: state.user.user.countries,\n    searchedCountry: state.country.country,\n    fetched: state.country.fetched,\n    fetching: state.country.fetching,\n    showModal: state.modal.showModal,\n    modalCountry: state.modal.modalCountry\n  };\n};\n\nvar mapDispatch = function mapDispatch(dispatch, ownProps) {\n  return {\n    fetchCountry: function fetchCountry(query) {\n      return dispatch(_fetchCountry(query));\n    },\n    putCountry: function putCountry(username, countries) {\n      return dispatch(_putCountry(username, countries));\n    },\n    openModal: function openModal(id) {\n      return dispatch(_openModal(id));\n    },\n    closeModal: function closeModal() {\n      return dispatch(_closeModal());\n    }\n  };\n};\n\nexport default connect(mapState, mapDispatch)(Search);\n;","map":{"version":3,"sources":["/Users/peterzernia/projects/countries/frontend/src/containers/Search.js"],"names":["React","Component","Modal","Results","SearchBar","connect","fetchCountry","putCountry","openModal","closeModal","DotLoader","Search","handleSubmit","e","preventDefault","props","target","country","value","handleClick","newCountryList","userCountries","newCountry","searchedCountry","name","innerText","concat","filter","username","fetching","fetched","mapState","state","user","countries","showModal","modal","modalCountry","mapDispatch","dispatch","ownProps","query","id"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Modal from '../components/Modal'\nimport Results from '../components/Results'\nimport SearchBar from '../components/SearchBar'\nimport { connect } from 'react-redux'\nimport { fetchCountry } from '../actions/countryActions'\nimport { putCountry } from '../actions/userActions'\nimport { openModal, closeModal } from '../actions/modalActions'\nimport { DotLoader } from 'react-spinners';\n\nclass Search extends Component {\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.props.fetchCountry(e.target.country.value);\n  }\n\n  /*\n  This function checks to see if the button was the Add or Remove button, and\n  changes the country list appropriately.\n  */\n  handleClick = (e) => {\n    e.preventDefault();\n    var newCountryList = this.props.userCountries\n    var newCountry = this.props.searchedCountry[e.target.name]\n    if (e.target.innerText === 'Add') {\n      newCountryList = this.props.userCountries.concat([newCountry]);\n    } else {\n      newCountryList = this.props.userCountries.filter(country => country !== newCountry);\n    }\n    this.props.putCountry(this.props.username, newCountryList);\n  }\n\n  render() {\n      return (\n        <div className=\"content\">\n          <SearchBar handleSubmit={this.handleSubmit} /> <br/>\n          {\n            this.props.fetching\n            ? <DotLoader size={50} color={'#007bff'} className=\"content\" />\n            : null\n          }\n          {\n            this.props.fetched\n            ? <Results handleClick={this.handleClick} {...this.props} />\n            : null\n          }\n          <Modal {...this.props} />\n        </div>\n      );\n  }\n}\n\nconst mapState = state => {\n  return {\n    username: state.user.user.username,\n    userCountries: state.user.user.countries,\n    searchedCountry: state.country.country,\n    fetched: state.country.fetched,\n    fetching: state.country.fetching,\n    showModal: state.modal.showModal,\n    modalCountry: state.modal.modalCountry\n  };\n};\n\nconst mapDispatch = (dispatch, ownProps) => {\n  return {\n    fetchCountry: (query) => dispatch(fetchCountry(query)),\n    putCountry: (username, countries) => dispatch(putCountry(username, countries)),\n    openModal: (id) => dispatch(openModal(id)),\n    closeModal: () => dispatch(closeModal())\n  };\n};\n\nexport default connect(mapState, mapDispatch)(Search);;\n"]},"metadata":{},"sourceType":"module"}