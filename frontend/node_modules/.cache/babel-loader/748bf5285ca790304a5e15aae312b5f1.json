{"ast":null,"code":"import _toConsumableArray from \"/Users/peterzernia/projects/countries/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/peterzernia/projects/countries/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar initialState = {\n  fetching: false,\n  fetched: false,\n  fetchingNext: false,\n  fetchedNext: false,\n  fetchingTripReports: false,\n  fetchedTripReports: false,\n  fetchingSlugTripReports: false,\n  fetchedSlugTripReports: false,\n  tripReports: {},\n  userTripReports: {},\n  slugTripReports: {}\n};\nexport default function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    // Basic axios request returns a response, and the state must be updated.\n    case \"FETCH_TRIP_REPORTS_PENDING\":\n      {\n        return _objectSpread({}, state, {\n          fetching: true\n        });\n      }\n\n    case \"FETCH_TRIP_REPORTS_FULFILLED\":\n      {\n        return _objectSpread({}, state, {\n          fetching: false,\n          fetched: true,\n          tripReports: action.tripReports\n        });\n      }\n\n    case \"FETCH_TRIP_REPORTS_REJECTED\":\n      {\n        return _objectSpread({}, state, {\n          fetching: false,\n          fetched: false\n        });\n      }\n\n    /*\n    In the case of fetching the next page of trip reports, the new trip reports\n    need to be added to the list of existing, fetched trip reports. They must\n    not overwnite the original list.\n    */\n\n    case \"FETCH_NEXT_TRIP_REPORTS_PENDING\":\n      {\n        return _objectSpread({}, state, {\n          fetchingNext: true,\n          fetchedNext: false\n        });\n      }\n\n    case \"FETCH_NEXT_TRIP_REPORTS_FULFILLED\":\n      {\n        return _objectSpread({}, state, {\n          fetchingNext: false,\n          fetchedNext: true,\n          tripReports: {\n            count: action.tripReports.count,\n            next: action.tripReports.next,\n            previous: action.tripReports.previous,\n            results: _toConsumableArray(state.tripReports.results).concat(action.tripReports.results)\n          }\n        });\n      }\n\n    case \"FETCH_NEXT_TRIP_REPORTS_REJECTED\":\n      {\n        return _objectSpread({}, state, {\n          fetchingNext: false,\n          fetchedNext: false\n        });\n      }\n    // Basic axios request for fetching a user's Trip Reports\n\n    case \"FETCH_USER_TRIP_REPORTS_PENDING\":\n      {\n        return _objectSpread({}, state, {\n          fetchingTripReports: true,\n          fetchedTripReports: false\n        });\n      }\n\n    case \"FETCH_USER_TRIP_REPORTS_FULFILLED\":\n      {\n        return _objectSpread({}, state, {\n          fetchingTripReports: false,\n          fetchedTripReports: true,\n          userTripReports: action.tripReports\n        });\n      }\n\n    case \"FETCH_USER_TRIP_REPORTS_REJECTED\":\n      {\n        return _objectSpread({}, state, {\n          fetchingTripReports: false,\n          fetchedTripReports: false\n        });\n      }\n\n    /*\n    In the case of fetching the next page of the user's trip reports, the new\n    trip reports need to be added to the list of existing, fetched trip reports.\n    They must not overwnite the original list.\n    */\n\n    case \"FETCH_NEXT_USER_TRIP_REPORTS_PENDING\":\n      {\n        return _objectSpread({}, state, {\n          fetchingNext: true,\n          fetchedNext: false\n        });\n      }\n\n    case \"FETCH_NEXT_USER_TRIP_REPORTS_FULFILLED\":\n      {\n        return _objectSpread({}, state, {\n          fetchingNext: false,\n          fetchedNext: true,\n          userTripReports: {\n            count: action.tripReports.count,\n            next: action.tripReports.next,\n            previous: action.tripReports.previous,\n            results: _toConsumableArray(state.userTripReports.results).concat(action.tripReports.results)\n          }\n        });\n      }\n\n    case \"FETCH_NEXT_USER_TRIP_REPORTS_REJECTED\":\n      {\n        return _objectSpread({}, state, {\n          fetchingNext: false,\n          fetchedNext: false\n        });\n      }\n    // Axios post\n\n    case \"POST_TRIP_REPORTS_PENDING\":\n      {\n        return _objectSpread({}, state);\n      }\n\n    case \"POST_TRIP_REPORTS_FULFILLED\":\n      {\n        return _objectSpread({}, state, {\n          /*\n          The axios response is a single trip report. The new trip report must be\n          added onto the array, then the array must be sorted by id for both the\n          Trip Reports and User Trip Reports lists.\n          */\n          userTripReports: {\n            results: _toConsumableArray(state.userTripReports.results).concat(action.response).sort(function (a, b) {\n              return a.id < b.id;\n            })\n          },\n          tripReports: {\n            results: _toConsumableArray(state.tripReports.results).concat(action.response).sort(function (a, b) {\n              return a.id < b.id;\n            })\n          }\n        });\n      }\n\n    case \"POST_TRIP_REPORTS_REJECTED\":\n      {\n        return _objectSpread({}, state);\n      }\n    // Axios deleet\n\n    case \"DELETE_TRIP_REPORTS_PENDING\":\n      {\n        return _objectSpread({}, state);\n      }\n\n    case \"DELETE_TRIP_REPORTS_FULFILLED\":\n      {\n        return _objectSpread({}, state, {\n          /*\n          The response is the deleted post that must be filtered out of both\n          lists.\n          */\n          userTripReports: {\n            results: _toConsumableArray(state.userTripReports.results).filter(function (tripReport) {\n              return tripReport.id !== action.response.id;\n            })\n          },\n          tripReports: {\n            results: _toConsumableArray(state.tripReports.results).filter(function (tripReport) {\n              return tripReport.id !== action.response.id;\n            })\n          }\n        });\n      }\n\n    case \"DELETE_TRIP_REPORTS_REJECTED\":\n      {\n        return _objectSpread({}, state);\n      }\n\n    case \"UPDATE_TRIP_REPORTS_PENDING\":\n      {\n        return _objectSpread({}, state);\n      }\n\n    case \"UPDATE_TRIP_REPORTS_FULFILLED\":\n      {\n        return _objectSpread({}, state, {\n          /*\n          The axios response is the updated post. The old, unupdated post must be\n          filtered out of both lists, the updated post must be added, then\n          the array must be sorted.\n          */\n          userTripReports: {\n            results: _toConsumableArray(state.userTripReports.results).filter(function (tripReport) {\n              return tripReport.id !== action.response.id;\n            }).concat(action.response).sort(function (a, b) {\n              return a.id < b.id;\n            })\n          },\n          tripReports: {\n            results: _toConsumableArray(state.tripReports.results).filter(function (tripReport) {\n              return tripReport.id !== action.response.id;\n            }).concat(action.response).sort(function (a, b) {\n              return a.id < b.id;\n            })\n          }\n        });\n      }\n\n    case \"UPDATE_TRIP_REPORTS_REJECTED\":\n      {\n        return _objectSpread({}, state);\n      }\n\n    case \"FETCH_SLUG_TRIP_REPORTS_PENDING\":\n      {\n        return _objectSpread({}, state, {\n          fetchingSlugTripReports: true,\n          fetchedSlugTripReports: false\n        });\n      }\n\n    case \"FETCH_SLUG_TRIP_REPORTS_FULFILLED\":\n      {\n        return _objectSpread({}, state, {\n          fetchingSlugTripReports: false,\n          fetchedSlugTripReports: true,\n          slugTripReports: action.tripReports\n        });\n      }\n\n    case \"FETCH_SLUG_TRIP_REPORTS_REJECTED\":\n      {\n        return _objectSpread({}, state, {\n          fetchingSlugTripReports: false,\n          fetchedSlugTripReports: false\n        });\n      }\n\n    case \"TOGGLE_FAVORITE_FULFILLED\":\n      {\n        return _objectSpread({}, state, {\n          /*\n          Same as PUT request, the response of the axios call to toggle favorite\n          returns the new Trip Report object with updated favorites array. This\n          Trip Report object must replace the old Trip Report object.\n          */\n          userTripReports: {\n            results: _toConsumableArray(state.userTripReports.results).filter(function (tripReport) {\n              return tripReport.id !== action.response.id;\n            }).concat(action.response).sort(function (a, b) {\n              return a.id < b.id;\n            })\n          },\n          tripReports: {\n            results: _toConsumableArray(state.tripReports.results).filter(function (tripReport) {\n              return tripReport.id !== action.response.id;\n            }).concat(action.response).sort(function (a, b) {\n              return a.id < b.id;\n            })\n          }\n        });\n      }\n\n    case \"TOGGLE_FAVORITE_REJECTED\":\n      {\n        return _objectSpread({}, state);\n      }\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/peterzernia/projects/countries/src/store/tripReport.js"],"names":["initialState","fetching","fetched","fetchingNext","fetchedNext","fetchingTripReports","fetchedTripReports","fetchingSlugTripReports","fetchedSlugTripReports","tripReports","userTripReports","slugTripReports","state","action","type","count","next","previous","results","concat","response","sort","a","b","id","filter","tripReport"],"mappings":"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","sourcesContent":["const initialState = {\n  fetching: false,\n  fetched: false,\n  fetchingNext: false,\n  fetchedNext: false,\n  fetchingTripReports: false,\n  fetchedTripReports: false,\n  fetchingSlugTripReports: false,\n  fetchedSlugTripReports: false,\n  tripReports: {},\n  userTripReports: {},\n  slugTripReports: {},\n}\n\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    // Basic axios request returns a response, and the state must be updated.\n    case \"FETCH_TRIP_REPORTS_PENDING\": {\n      return {\n        ...state,\n        fetching: true,\n      }\n    }\n    case \"FETCH_TRIP_REPORTS_FULFILLED\": {\n      return {\n        ...state,\n        fetching: false,\n        fetched: true,\n        tripReports: action.tripReports,\n      }\n    }\n    case \"FETCH_TRIP_REPORTS_REJECTED\": {\n      return {\n        ...state,\n        fetching: false,\n        fetched: false,\n      }\n    }\n    /*\n    In the case of fetching the next page of trip reports, the new trip reports\n    need to be added to the list of existing, fetched trip reports. They must\n    not overwnite the original list.\n    */\n    case \"FETCH_NEXT_TRIP_REPORTS_PENDING\": {\n      return {\n        ...state,\n        fetchingNext: true,\n        fetchedNext: false\n      }\n    }\n    case \"FETCH_NEXT_TRIP_REPORTS_FULFILLED\": {\n      return {\n        ...state,\n        fetchingNext: false,\n        fetchedNext: true,\n        tripReports: {\n          count: action.tripReports.count,\n          next: action.tripReports.next,\n          previous: action.tripReports.previous,\n          results: [...state.tripReports.results].concat(action.tripReports.results),\n        }\n      }\n    }\n    case \"FETCH_NEXT_TRIP_REPORTS_REJECTED\": {\n      return {\n        ...state,\n        fetchingNext: false,\n        fetchedNext: false,\n      }\n    }\n    // Basic axios request for fetching a user's Trip Reports\n    case \"FETCH_USER_TRIP_REPORTS_PENDING\": {\n      return {\n        ...state,\n        fetchingTripReports: true,\n        fetchedTripReports: false\n      }\n    }\n    case \"FETCH_USER_TRIP_REPORTS_FULFILLED\": {\n      return {\n        ...state,\n        fetchingTripReports: false,\n        fetchedTripReports: true,\n        userTripReports: action.tripReports,\n      }\n    }\n    case \"FETCH_USER_TRIP_REPORTS_REJECTED\": {\n      return {\n        ...state,\n        fetchingTripReports: false,\n        fetchedTripReports: false,\n      }\n    }\n    /*\n    In the case of fetching the next page of the user's trip reports, the new\n    trip reports need to be added to the list of existing, fetched trip reports.\n    They must not overwnite the original list.\n    */\n    case \"FETCH_NEXT_USER_TRIP_REPORTS_PENDING\": {\n      return {\n        ...state,\n        fetchingNext: true,\n        fetchedNext: false\n      }\n    }\n    case \"FETCH_NEXT_USER_TRIP_REPORTS_FULFILLED\": {\n      return {\n        ...state,\n        fetchingNext: false,\n        fetchedNext: true,\n        userTripReports: {\n          count: action.tripReports.count,\n          next: action.tripReports.next,\n          previous: action.tripReports.previous,\n          results: [...state.userTripReports.results].concat(action.tripReports.results),\n        }\n      }\n    }\n    case \"FETCH_NEXT_USER_TRIP_REPORTS_REJECTED\": {\n      return {\n        ...state,\n        fetchingNext: false,\n        fetchedNext: false,\n      }\n    }\n    // Axios post\n    case \"POST_TRIP_REPORTS_PENDING\": {\n      return {\n        ...state,\n      }\n    }\n    case \"POST_TRIP_REPORTS_FULFILLED\": {\n      return {\n        ...state,\n        /*\n        The axios response is a single trip report. The new trip report must be\n        added onto the array, then the array must be sorted by id for both the\n        Trip Reports and User Trip Reports lists.\n        */\n        userTripReports: {\n          results: [...state.userTripReports.results].concat(action.response).sort((a, b) => a.id < b.id)\n        },\n        tripReports: {\n          results: [...state.tripReports.results].concat(action.response).sort((a, b) => a.id < b.id)\n        }\n      }\n    }\n    case \"POST_TRIP_REPORTS_REJECTED\": {\n      return {\n        ...state,\n        }\n    }\n    // Axios deleet\n    case \"DELETE_TRIP_REPORTS_PENDING\": {\n      return {\n        ...state,\n      }\n    }\n    case \"DELETE_TRIP_REPORTS_FULFILLED\": {\n      return {\n        ...state,\n        /*\n        The response is the deleted post that must be filtered out of both\n        lists.\n        */\n        userTripReports: {\n          results: [...state.userTripReports.results].filter(tripReport => tripReport.id !== action.response.id)\n        },\n        tripReports: {\n          results: [...state.tripReports.results].filter(tripReport => tripReport.id !== action.response.id)\n        }\n      }\n    }\n    case \"DELETE_TRIP_REPORTS_REJECTED\": {\n      return {\n        ...state,\n      }\n    }\n    case \"UPDATE_TRIP_REPORTS_PENDING\": {\n      return {\n        ...state,\n      }\n    }\n    case \"UPDATE_TRIP_REPORTS_FULFILLED\": {\n      return {\n        ...state,\n        /*\n        The axios response is the updated post. The old, unupdated post must be\n        filtered out of both lists, the updated post must be added, then\n        the array must be sorted.\n        */\n        userTripReports: {\n          results: [...state.userTripReports.results].filter(tripReport => tripReport.id !== action.response.id).concat(action.response).sort((a, b) => a.id < b.id)\n        },\n        tripReports: {\n          results: [...state.tripReports.results].filter(tripReport => tripReport.id !== action.response.id).concat(action.response).sort((a, b) => a.id < b.id)\n        }\n      }\n    }\n    case \"UPDATE_TRIP_REPORTS_REJECTED\": {\n      return {\n        ...state,\n      }\n    }\n    case \"FETCH_SLUG_TRIP_REPORTS_PENDING\": {\n      return {\n        ...state,\n        fetchingSlugTripReports: true,\n        fetchedSlugTripReports: false\n      }\n    }\n    case \"FETCH_SLUG_TRIP_REPORTS_FULFILLED\": {\n      return {\n        ...state,\n        fetchingSlugTripReports: false,\n        fetchedSlugTripReports: true,\n        slugTripReports: action.tripReports,\n      }\n    }\n    case \"FETCH_SLUG_TRIP_REPORTS_REJECTED\": {\n      return {\n        ...state,\n        fetchingSlugTripReports: false,\n        fetchedSlugTripReports: false,\n      }\n    }\n    case \"TOGGLE_FAVORITE_FULFILLED\": {\n      return {\n        ...state,\n        /*\n        Same as PUT request, the response of the axios call to toggle favorite\n        returns the new Trip Report object with updated favorites array. This\n        Trip Report object must replace the old Trip Report object.\n        */\n        userTripReports: {\n          results: [...state.userTripReports.results].filter(tripReport => tripReport.id !== action.response.id).concat(action.response).sort((a, b) => a.id < b.id)\n        },\n        tripReports: {\n          results: [...state.tripReports.results].filter(tripReport => tripReport.id !== action.response.id).concat(action.response).sort((a, b) => a.id < b.id)\n        }\n      }\n    }\n    case \"TOGGLE_FAVORITE_REJECTED\": {\n      return {\n        ...state,\n\n      }\n    }\n    default:\n      return state\n  }\n}\n"]},"metadata":{},"sourceType":"module"}