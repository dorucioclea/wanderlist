{"ast":null,"code":"import axios from 'axios';\nimport { fetchUser } from './userActions';\nexport var authStart = function authStart() {\n  return {\n    type: \"AUTH_START\"\n  };\n};\nexport var authSucess = function authSucess(token) {\n  return {\n    type: \"AUTH_SUCESS\",\n    token: token\n  };\n};\nexport var authFail = function authFail(error) {\n  return {\n    type: \"AUTH_FAIL\",\n    error: error\n  };\n};\nexport var authLogout = function authLogout() {\n  localStorage.removeItem('token');\n  localStorage.removeItem('expirationDate');\n  return {\n    type: \"AUTH_LOGOUT\"\n  };\n};\nexport var authLogin = function authLogin(username, password) {\n  return function (dispatch) {\n    dispatch(authStart());\n    axios.post('http://localhost:8000/api/v1/rest-auth/login/', {\n      username: username,\n      password: password\n    }).then(function (response) {\n      var token = response.data.key;\n      localStorage.setItem('token', token);\n      dispatch(authSucess(token));\n    }).catch(function (err) {\n      dispatch(authFail(err));\n    });\n  };\n};\nexport var authRegister = function authRegister(username, email, password1, password2) {\n  return function (dispatch) {\n    localStorage.removeItem('token');\n    dispatch(authStart());\n    axios.post('http://localhost:8000/api/v1/rest-auth/registration/', {\n      username: username,\n      email: email,\n      password1: password1,\n      password2: password2\n    }).then(function (response) {\n      var token = response.data.key;\n      localStorage.setItem('token', token);\n      ;\n      dispatch(authSucess(token));\n    }).catch(function (err) {\n      dispatch(authFail(err));\n    });\n  };\n};\n/*\nChecks to see if a token exists in localStorage. If a token exists, it runs the\nlogin function. If no token exits it runs the logout function.\n*/\n\nexport var authCheckState = function authCheckState() {\n  return function (dispatch) {\n    var token = localStorage.getItem('token');\n\n    if (token === null) {\n      dispatch(authLogout());\n    } else {\n      dispatch(authSucess(token));\n      fetchUser();\n    }\n  };\n};","map":{"version":3,"sources":["/Users/peterzernia/projects/countries/frontend/src/actions/authActions.js"],"names":["axios","fetchUser","authStart","type","authSucess","token","authFail","error","authLogout","localStorage","removeItem","authLogin","username","password","dispatch","post","then","response","data","key","setItem","catch","err","authRegister","email","password1","password2","authCheckState","getItem"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport { fetchUser } from './userActions'\n\nexport const authStart = () => {\n  return {\n    type: \"AUTH_START\"\n  }\n}\n\nexport const authSucess = token => {\n  return {\n    type: \"AUTH_SUCESS\",\n    token: token\n  }\n}\n\nexport const authFail = error => {\n  return {\n    type: \"AUTH_FAIL\",\n    error: error\n  }\n}\n\nexport const authLogout = () => {\n  localStorage.removeItem('token');\n  localStorage.removeItem('expirationDate');\n  return {\n    type: \"AUTH_LOGOUT\"\n  }\n}\n\nexport const authLogin = (username, password) => {\n  return dispatch => {\n    dispatch(authStart());\n    axios.post('http://localhost:8000/api/v1/rest-auth/login/', {\n      username: username,\n      password: password\n    })\n      .then(response => {\n        const token = response.data.key;\n        localStorage.setItem('token', token);\n        dispatch(authSucess(token));\n      })\n      .catch(err => {\n        dispatch(authFail(err));\n      })\n  }\n}\n\nexport const authRegister = (username, email, password1, password2) => {\n  return dispatch => {\n    localStorage.removeItem('token');\n    dispatch(authStart());\n    axios.post('http://localhost:8000/api/v1/rest-auth/registration/', {\n      username: username,\n      email: email,\n      password1: password1,\n      password2: password2\n    })\n      .then(response => {\n        const token = response.data.key;\n        localStorage.setItem('token', token);;\n        dispatch(authSucess(token));\n      })\n      .catch(err => {\n        dispatch(authFail(err))\n      })\n  }\n}\n\n/*\nChecks to see if a token exists in localStorage. If a token exists, it runs the\nlogin function. If no token exits it runs the logout function.\n*/\nexport const authCheckState = () => {\n  return dispatch => {\n    const token = localStorage.getItem('token');\n    if (token === null) {\n      dispatch(authLogout());\n    } else {\n      dispatch(authSucess(token));\n      fetchUser();\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}