{"ast":null,"code":"import _defineProperty from \"/Users/peterzernia/projects/countries/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/peterzernia/projects/countries/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/peterzernia/projects/countries/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/peterzernia/projects/countries/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/peterzernia/projects/countries/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/peterzernia/projects/countries/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _objectWithoutProperties from \"/Users/peterzernia/projects/countries/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/peterzernia/projects/countries/src/components/SearchBar.js\";\nimport React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport countries from '../country_data';\nimport Autosuggest from 'react-autosuggest';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport TextField from '@material-ui/core/TextField';\n\nfunction renderInputComponent(inputProps) {\n  var classes = inputProps.classes,\n      _inputProps$inputRef = inputProps.inputRef,\n      _inputRef = _inputProps$inputRef === void 0 ? function () {} : _inputProps$inputRef,\n      ref = inputProps.ref,\n      other = _objectWithoutProperties(inputProps, [\"classes\", \"inputRef\", \"ref\"]);\n\n  return React.createElement(TextField, Object.assign({\n    InputProps: {\n      inputRef: function inputRef(node) {\n        ref(node);\n\n        _inputRef(node);\n      },\n      classes: {\n        input: classes.input\n      }\n    }\n  }, other, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }));\n}\n\nfunction renderSuggestion(suggestion, _ref) {\n  var query = _ref.query,\n      isHighlighted = _ref.isHighlighted;\n  var matches = match(suggestion.label, query);\n  var parts = parse(suggestion.label, matches);\n  return React.createElement(MenuItem, {\n    selected: isHighlighted,\n    component: \"div\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, parts.map(function (part, index) {\n    return part.highlight ? React.createElement(\"span\", {\n      key: String(index),\n      style: {\n        fontWeight: 500\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, part.text) : React.createElement(\"strong\", {\n      key: String(index),\n      style: {\n        fontWeight: 300\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, part.text);\n  })));\n}\n\nfunction getSuggestions(value) {\n  var inputValue = deburr(value.trim()).toLowerCase();\n  var inputLength = inputValue.length;\n  var count = 0;\n  return inputLength === 0 ? [] : suggestions.filter(function (suggestion) {\n    var keep = count < 5 && suggestion.name.slice(0, inputLength).toLowerCase() === inputValue;\n\n    if (keep) {\n      count += 1;\n    }\n\n    return keep;\n  });\n}\n\nfunction getSuggestionValue(suggestion) {\n  return suggestion.label;\n}\n\nvar SearchBar =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(SearchBar, _Component);\n\n  function SearchBar() {\n    var _this;\n\n    _classCallCheck(this, SearchBar);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SearchBar).call(this));\n\n    _this.handleSuggestionsFetchRequested = function (_ref2) {\n      var value = _ref2.value;\n\n      _this.setState({\n        suggestions: getSuggestions(value)\n      });\n    };\n\n    _this.handleSuggestionsClearRequested = function () {\n      _this.setState({\n        suggestions: []\n      });\n    };\n\n    _this.handleChange = function (name) {\n      return function (event, _ref3) {\n        var newValue = _ref3.newValue;\n\n        _this.setState(_defineProperty({}, name, newValue));\n      };\n    };\n\n    _this.state = {\n      value: '',\n      suggestions: []\n    };\n    return _this;\n  }\n\n  _createClass(SearchBar, [{\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          value = _this$state.value,\n          suggestions = _this$state.suggestions;\n      var inputProps = {\n        placeholder: 'Search for a Country',\n        value: value,\n        onChange: this.onChange\n      };\n      var autosuggestProps = {\n        renderInputComponent: renderInputComponent,\n        suggestions: this.state.suggestions,\n        onSuggestionsFetchRequested: this.handleSuggestionsFetchRequested,\n        onSuggestionsClearRequested: this.handleSuggestionsClearRequested,\n        getSuggestionValue: getSuggestionValue,\n        renderSuggestion: renderSuggestion\n      };\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        onSubmit: this.props.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, React.createElement(Typography, {\n        variant: \"h4\",\n        gutterBottom: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, \"Search for a Country\"), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }), React.createElement(Autosuggest, Object.assign({}, autosuggestProps, {\n        inputProps: {\n          classes: classes,\n          placeholder: 'Search a country (start with a)',\n          value: this.state.single,\n          onChange: this.handleChange('single')\n        },\n        renderSuggestionsContainer: function renderSuggestionsContainer(options) {\n          return React.createElement(Paper, Object.assign({}, options.containerProps, {\n            square: true,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 134\n            },\n            __self: this\n          }), options.children);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      })), React.createElement(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        type: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, \"Search\")));\n    }\n  }]);\n\n  return SearchBar;\n}(Component);\n\n;\nexport default SearchBar;","map":{"version":3,"sources":["/Users/peterzernia/projects/countries/src/components/SearchBar.js"],"names":["React","Component","Button","Typography","countries","Autosuggest","MenuItem","TextField","renderInputComponent","inputProps","classes","inputRef","ref","other","node","input","renderSuggestion","suggestion","query","isHighlighted","matches","match","label","parts","parse","map","part","index","highlight","String","fontWeight","text","getSuggestions","value","inputValue","deburr","trim","toLowerCase","inputLength","length","count","suggestions","filter","keep","name","slice","getSuggestionValue","SearchBar","handleSuggestionsFetchRequested","setState","handleSuggestionsClearRequested","handleChange","event","newValue","state","placeholder","onChange","autosuggestProps","onSuggestionsFetchRequested","onSuggestionsClearRequested","props","handleSubmit","single","options","containerProps","children"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Button from '@material-ui/core/Button'\nimport Typography from '@material-ui/core/Typography'\nimport countries from '../country_data'\nimport Autosuggest from 'react-autosuggest'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport TextField from '@material-ui/core/TextField'\n\nfunction renderInputComponent(inputProps) {\n  const { classes, inputRef = () => {}, ref, ...other } = inputProps;\n\n  return (\n    <TextField\n      InputProps={{\n        inputRef: node => {\n          ref(node);\n          inputRef(node);\n        },\n        classes: {\n          input: classes.input,\n        },\n      }}\n      {...other}\n    />\n  );\n}\n\nfunction renderSuggestion(suggestion, { query, isHighlighted }) {\n  const matches = match(suggestion.label, query);\n  const parts = parse(suggestion.label, matches);\n\n  return (\n    <MenuItem selected={isHighlighted} component=\"div\">\n      <div>\n        {parts.map((part, index) => {\n          return part.highlight ? (\n            <span key={String(index)} style={{ fontWeight: 500 }}>\n              {part.text}\n            </span>\n          ) : (\n            <strong key={String(index)} style={{ fontWeight: 300 }}>\n              {part.text}\n            </strong>\n          );\n        })}\n      </div>\n    </MenuItem>\n  );\n}\n\nfunction getSuggestions(value) {\n  const inputValue = deburr(value.trim()).toLowerCase();\n  const inputLength = inputValue.length;\n  let count = 0;\n\n  return inputLength === 0\n    ? []\n    : suggestions.filter(suggestion => {\n        const keep =\n          count < 5 && suggestion.name.slice(0, inputLength).toLowerCase() === inputValue;\n\n        if (keep) {\n          count += 1;\n        }\n\n        return keep;\n      });\n}\n\nfunction getSuggestionValue(suggestion) {\n  return suggestion.label;\n}\n\nclass SearchBar extends Component {\n  constructor() {\n    super();\n    this.state = {\n      value: '',\n      suggestions: []\n    };\n  }\n\n  handleSuggestionsFetchRequested = ({ value }) => {\n    this.setState({\n      suggestions: getSuggestions(value),\n    });\n  };\n\n  handleSuggestionsClearRequested = () => {\n    this.setState({\n      suggestions: [],\n    });\n  };\n\n  handleChange = name => (event, { newValue }) => {\n    this.setState({\n      [name]: newValue,\n    });\n  };\n\n  render() {\n    const { value, suggestions } = this.state;\n\n    const inputProps = {\n      placeholder: 'Search for a Country',\n      value,\n      onChange: this.onChange\n    };\n\n  const autosuggestProps = {\n      renderInputComponent,\n      suggestions: this.state.suggestions,\n      onSuggestionsFetchRequested: this.handleSuggestionsFetchRequested,\n      onSuggestionsClearRequested: this.handleSuggestionsClearRequested,\n      getSuggestionValue,\n      renderSuggestion,\n    };\n\n    return(\n      <div>\n        <form onSubmit={this.props.handleSubmit}>\n          <Typography variant=\"h4\" gutterBottom>\n            Search for a Country\n          </Typography><br/>\n          <Autosuggest\n          {...autosuggestProps}\n          inputProps={{\n            classes,\n            placeholder: 'Search a country (start with a)',\n            value: this.state.single,\n            onChange: this.handleChange('single'),\n          }}\n          renderSuggestionsContainer={options => (\n            <Paper {...options.containerProps} square>\n              {options.children}\n            </Paper>\n          )}\n        />\n          <Button variant=\"contained\" color=\"primary\" type='submit'>Search</Button>\n        </form>\n      </div>\n    )\n  }\n};\n\nexport default SearchBar;\n"]},"metadata":{},"sourceType":"module"}