{"ast":null,"code":"import _classCallCheck from \"/Users/peterzernia/projects/countries/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/peterzernia/projects/countries/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/peterzernia/projects/countries/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/peterzernia/projects/countries/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/peterzernia/projects/countries/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/peterzernia/projects/countries/src/containers/Post.js\";\nimport React, { Component } from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport CountryModal from '../components/CountryModal';\nimport PostModal from '../components/PostModal';\nimport TripReport from '../components/TripReport';\nimport { fetchUserTripReports, postTripReport, deleteTripReport, updateTripReport } from '../actions/tripReportActions';\nimport { openPostModal, closePostModal, openUpdatePostModal, openCountryModal, closeCountryModal } from '../actions/modalActions';\nimport { DotLoader } from 'react-spinners';\nimport Button from '@material-ui/core/Button';\n\nvar Post =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Post, _Component);\n\n  function Post() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Post);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Post)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.handlePostSubmit = function (e) {\n      e.preventDefault();\n      var countries = [];\n\n      for (var i = 0, l = e.target.countries.value.length; i < l; i++) {\n        if (!isNaN(Number(e.target.countries.value[i]))) {\n          countries.push(Number(e.target.countries.value[i]));\n        }\n      }\n\n      _this.props.postTripReport(_this.props.pk, e.target.title.value, e.target.content.value, countries);\n\n      _this.props.closePostModal();\n    };\n\n    _this.handleUpdateSubmit = function (e) {\n      e.preventDefault();\n      var options = e.target.countries.options;\n      var countries = [];\n\n      for (var i = 0, l = options.length; i < l; i++) {\n        if (options[i].selected) {\n          countries.push(options[i].value);\n        }\n      }\n\n      _this.props.updateTripReport(_this.props.modalPost.id, _this.props.pk, e.target.title.value, e.target.content.value, countries);\n\n      _this.props.closePostModal();\n    };\n\n    return _this;\n  }\n\n  _createClass(Post, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var errorMessage = null;\n\n      if (this.props.error) {\n        errorMessage = React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 68\n          },\n          __self: this\n        }, this.props.error.message);\n      }\n\n      var listTripReports = this.props.tripReports.map(function (tripReport) {\n        return React.createElement(\"div\", {\n          key: tripReport.id,\n          className: \"trip-report\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 72\n          },\n          __self: this\n        }, React.createElement(TripReport, Object.assign({}, tripReport, {\n          openCountryModal: _this2.props.openCountryModal,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73\n          },\n          __self: this\n        })), React.createElement(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: function onClick() {\n            return _this2.props.openUpdatePostModal(tripReport);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74\n          },\n          __self: this\n        }, \"Update\"), React.createElement(Button, {\n          variant: \"contained\",\n          color: \"secondary\",\n          onClick: function onClick() {\n            if (window.confirm('Delete the post?')) {\n              _this2.props.deleteTripReport(tripReport);\n            }\n\n            ;\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 75\n          },\n          __self: this\n        }, \"Delete\"));\n      });\n      return React.createElement(\"div\", {\n        className: \"content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, errorMessage, React.createElement(PostModal, Object.assign({}, this.props, {\n        handlePostSubmit: this.handlePostSubmit,\n        handleUpdateSubmit: this.handleUpdateSubmit,\n        errorMessage: this.errorMessage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      })), React.createElement(CountryModal, Object.assign({}, this.props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      })), React.createElement(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        className: \"btn btn-primary\",\n        onClick: this.props.openPostModal,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, \"New Trip Report\"), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }), this.props.fetchingTripReports && React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, React.createElement(DotLoader, {\n        size: 50,\n        color: '#66bb6a',\n        className: \"content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      })), this.props.fetchedTripReports && React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, listTripReports));\n    }\n  }]);\n\n  return Post;\n}(Component);\n\nvar mapState = function mapState(state) {\n  return {\n    error: state.tripReport.error,\n    username: state.user.user.username,\n    pk: state.user.user.pk,\n    showPostModal: state.modal.showPostModal,\n    fetchingTripReports: state.tripReport.fetchingTripReports,\n    fetchedTripReports: state.tripReport.fetchedTripReports,\n    tripReports: state.tripReport.userTripReports,\n    updatePostModal: state.modal.updatePostModal,\n    modalPost: state.modal.modalPost,\n    showCountryModal: state.modal.showCountryModal,\n    modalCountry: state.modal.modalCountry\n  };\n};\n\nvar mapDispatch = function mapDispatch(dispatch) {\n  return bindActionCreators({\n    fetchUserTripReports: fetchUserTripReports,\n    postTripReport: postTripReport,\n    deleteTripReport: deleteTripReport,\n    updateTripReport: updateTripReport,\n    openPostModal: openPostModal,\n    closePostModal: closePostModal,\n    openUpdatePostModal: openUpdatePostModal,\n    openCountryModal: openCountryModal,\n    closeCountryModal: closeCountryModal\n  }, dispatch);\n};\n\nexport default connect(mapState, mapDispatch)(Post);\nPost.propTypes = {\n  error: PropTypes.object,\n  username: PropTypes.string,\n  pk: PropTypes.number,\n  showPostModal: PropTypes.bool,\n  fetchingTripReports: PropTypes.bool,\n  fetchedTripReports: PropTypes.bool,\n  tripReports: PropTypes.array,\n  updatePostModal: PropTypes.bool,\n  modalPost: PropTypes.object,\n  showCountryModal: PropTypes.bool,\n  modalCountry: PropTypes.object,\n  fetchUserTripReports: PropTypes.func,\n  postTripReport: PropTypes.func,\n  deleteTripReport: PropTypes.func,\n  updateTripReport: PropTypes.func,\n  openPostModal: PropTypes.func,\n  closePostModal: PropTypes.func,\n  openUpdatePostModal: PropTypes.func,\n  openCountryModal: PropTypes.func,\n  closeCountryModal: PropTypes.func\n}; //this.props.updateTripReport(tripReport.id, this.props.username, tripReport.title, tripReport.content, tripReport.countries)","map":{"version":3,"sources":["/Users/peterzernia/projects/countries/src/containers/Post.js"],"names":["React","Component","bindActionCreators","connect","PropTypes","CountryModal","PostModal","TripReport","fetchUserTripReports","postTripReport","deleteTripReport","updateTripReport","openPostModal","closePostModal","openUpdatePostModal","openCountryModal","closeCountryModal","DotLoader","Button","Post","handlePostSubmit","e","preventDefault","countries","i","l","target","value","length","isNaN","Number","push","props","pk","title","content","handleUpdateSubmit","options","selected","modalPost","id","errorMessage","error","message","listTripReports","tripReports","map","tripReport","window","confirm","fetchingTripReports","fetchedTripReports","mapState","state","username","user","showPostModal","modal","userTripReports","updatePostModal","showCountryModal","modalCountry","mapDispatch","dispatch","propTypes","object","string","number","bool","array","func"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { bindActionCreators } from 'redux'\nimport { connect } from 'react-redux'\nimport PropTypes from 'prop-types'\nimport CountryModal from '../components/CountryModal'\nimport PostModal from '../components/PostModal'\nimport TripReport from '../components/TripReport'\nimport { fetchUserTripReports, postTripReport, deleteTripReport, updateTripReport } from '../actions/tripReportActions'\nimport { openPostModal, closePostModal, openUpdatePostModal, openCountryModal, closeCountryModal } from '../actions/modalActions'\nimport { DotLoader } from 'react-spinners'\nimport Button from '@material-ui/core/Button'\n\nclass Post extends Component {\n\n  // componentDidMount() {\n  //   this.props.fetchUserTripReports(this.props.username);\n  // }\n\n/*\nhandlPostSubmit will create a new trip report and handleUpdateSubmit will\nupdate an existing trip report. Both functions are passed into the Post Modal.\nIf the Post Modal is opened with openPostModal, this.props.updatePostModal\nremains false and the blank form is displayed, and the submit button will\ncreate a new post. If the Post Modal is openeed with openUpdatePostModal,\nthis.props.updatePostModal will flip to true, and the pre-filled in form will\ndisplay and the submit button will update the existing trip report.\n*/\n  handlePostSubmit = (e) => {\n    e.preventDefault();\n    let countries =[];\n    for (let i = 0, l = e.target.countries.value.length; i < l; i++) {\n      if (!isNaN(Number(e.target.countries.value[i]))){\n        countries.push(Number(e.target.countries.value[i]));\n      }\n    }\n    this.props.postTripReport(\n      this.props.pk,\n      e.target.title.value,\n      e.target.content.value,\n      countries\n    );\n    this.props.closePostModal();\n  }\n\n  handleUpdateSubmit = (e) => {\n    e.preventDefault();\n    var options = e.target.countries.options;\n    var countries =[];\n    for (var i = 0, l = options.length; i < l; i++) {\n      if (options[i].selected) {\n        countries.push(options[i].value);\n      }\n    }\n    this.props.updateTripReport(\n      this.props.modalPost.id,\n      this.props.pk,\n      e.target.title.value,\n      e.target.content.value,\n      countries\n    );\n    this.props.closePostModal();\n  }\n\n  render(){\n\n    let errorMessage = null;\n    if (this.props.error) {\n      errorMessage = <p>{this.props.error.message}</p>\n    }\n\n    const listTripReports = this.props.tripReports.map(tripReport =>(\n      <div key={tripReport.id} className='trip-report'>\n        <TripReport {...tripReport} openCountryModal={this.props.openCountryModal} />\n        <Button variant=\"contained\" color=\"primary\" onClick={() => this.props.openUpdatePostModal(tripReport)}>Update</Button>\n        <Button variant=\"contained\" color=\"secondary\" onClick={() => {if(window.confirm('Delete the post?')) {this.props.deleteTripReport(tripReport)};}}>Delete</Button>\n      </div>\n    ));\n\n    return(\n      <div className=\"content\">\n        {errorMessage}\n        <PostModal {...this.props} handlePostSubmit={this.handlePostSubmit} handleUpdateSubmit={this.handleUpdateSubmit} errorMessage={this.errorMessage}/>\n        <CountryModal {...this.props} />\n        <Button variant=\"contained\" color=\"primary\" className=\"btn btn-primary\" onClick={this.props.openPostModal}>New Trip Report</Button><br/>\n        {this.props.fetchingTripReports && <div><DotLoader size={50} color={'#66bb6a'} className=\"content\" /></div>}\n        {this.props.fetchedTripReports && <div>{listTripReports}</div>}\n      </div>\n    );\n  }\n}\n\nconst mapState = state => {\n  return {\n    error: state.tripReport.error,\n    username: state.user.user.username,\n    pk: state.user.user.pk,\n    showPostModal: state.modal.showPostModal,\n    fetchingTripReports: state.tripReport.fetchingTripReports,\n    fetchedTripReports: state.tripReport.fetchedTripReports,\n    tripReports: state.tripReport.userTripReports,\n    updatePostModal: state.modal.updatePostModal,\n    modalPost: state.modal.modalPost,\n    showCountryModal: state.modal.showCountryModal,\n    modalCountry: state.modal.modalCountry,\n  };\n}\n\nconst mapDispatch = dispatch => {\n  return bindActionCreators({\n    fetchUserTripReports,\n    postTripReport,\n    deleteTripReport,\n    updateTripReport,\n    openPostModal,\n    closePostModal,\n    openUpdatePostModal,\n    openCountryModal,\n    closeCountryModal\n  }, dispatch);\n}\n\nexport default connect(mapState, mapDispatch)(Post);\n\nPost.propTypes = {\n  error: PropTypes.object,\n  username: PropTypes.string,\n  pk: PropTypes.number,\n  showPostModal: PropTypes.bool,\n  fetchingTripReports: PropTypes.bool,\n  fetchedTripReports: PropTypes.bool,\n  tripReports: PropTypes.array,\n  updatePostModal: PropTypes.bool,\n  modalPost: PropTypes.object,\n  showCountryModal: PropTypes.bool,\n  modalCountry: PropTypes.object,\n  fetchUserTripReports: PropTypes.func,\n  postTripReport: PropTypes.func,\n  deleteTripReport: PropTypes.func,\n  updateTripReport: PropTypes.func,\n  openPostModal: PropTypes.func,\n  closePostModal: PropTypes.func,\n  openUpdatePostModal: PropTypes.func,\n  openCountryModal: PropTypes.func,\n  closeCountryModal: PropTypes.func\n};\n\n//this.props.updateTripReport(tripReport.id, this.props.username, tripReport.title, tripReport.content, tripReport.countries)\n"]},"metadata":{},"sourceType":"module"}