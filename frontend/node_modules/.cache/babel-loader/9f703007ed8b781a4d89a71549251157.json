{"ast":null,"code":"import _classCallCheck from \"/Users/peterzernia/projects/countries/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/peterzernia/projects/countries/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/peterzernia/projects/countries/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/peterzernia/projects/countries/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/peterzernia/projects/countries/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/peterzernia/projects/countries/src/containers/Post.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport PostModal from '../components/PostModal';\nimport TripReport from '../components/TripReport';\nimport { fetchUserTripReports as _fetchUserTripReports, postTripReport as _postTripReport, deleteTripReport as _deleteTripReport, updateTripReport as _updateTripReport } from '../actions/tripReportActions';\nimport { openPostModal as _openPostModal, closePostModal as _closePostModal } from '../actions/modalActions';\nimport { DotLoader } from 'react-spinners';\n\nvar Post =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Post, _Component);\n\n  function Post() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Post);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Post)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.handleSubmit = function (e) {\n      e.preventDefault();\n      var options = e.target.countries.options;\n      var countries = [];\n\n      for (var i = 0, l = options.length; i < l; i++) {\n        if (options[i].selected) {\n          countries.push(options[i].value);\n        }\n      }\n\n      _this.props.postTripReport(_this.props.username, e.target.title.value, e.target.content.value, countries);\n\n      _this.props.closePostModal();\n    };\n\n    return _this;\n  }\n\n  _createClass(Post, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.fetchUserTripReports(this.props.username);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var listTripReports = this.props.tripReports.map(function (tripReport) {\n        return React.createElement(\"div\", {\n          key: tripReport.id,\n          className: \"trip-report\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 42\n          },\n          __self: this\n        }, React.createElement(TripReport, Object.assign({}, tripReport, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 43\n          },\n          __self: this\n        })), React.createElement(\"button\", {\n          className: \"btn btn-danger\",\n          onClick: function onClick() {\n            return _this2.props.deleteTripReport(tripReport.id);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 44\n          },\n          __self: this\n        }, \"Delete Post\"), React.createElement(\"button\", {\n          className: \"btn btn-primary\",\n          onClick: function onClick() {\n            return _this2.props.updateTripReport(tripReport.id, _this2.props.username, tripReport.title, tripReport.content, tripReport.countries);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 45\n          },\n          __self: this\n        }, \"Update Post\"));\n      });\n      return React.createElement(\"div\", {\n        className: \"content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, React.createElement(PostModal, Object.assign({}, this.props, {\n        handleSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      })), React.createElement(\"button\", {\n        className: \"btn btn-primary\",\n        onClick: this.props.openPostModal,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, \"New Post\"), this.props.fetchingTripReports && React.createElement(DotLoader, {\n        size: 50,\n        color: '#007bff',\n        className: \"content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }), this.props.fetchedTripReports && React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, listTripReports));\n    }\n  }]);\n\n  return Post;\n}(Component);\n\nvar mapState = function mapState(state) {\n  return {\n    error: state.tripReport.error,\n    username: state.user.user.username,\n    showPostModal: state.modal.showPostModal,\n    fetchingTripReports: state.tripReport.fetchingTripReports,\n    fetchedTripReports: state.tripReport.fetchedTripReports,\n    tripReports: state.tripReport.userTripReports\n  };\n};\n\nvar mapDispatch = function mapDispatch(dispatch) {\n  return {\n    fetchUserTripReports: function fetchUserTripReports(username) {\n      return dispatch(_fetchUserTripReports(username));\n    },\n    postTripReport: function postTripReport(title, content, author, countries) {\n      return dispatch(_postTripReport(title, content, author, countries));\n    },\n    deleteTripReport: function deleteTripReport(tripReport) {\n      return dispatch(_deleteTripReport(tripReport));\n    },\n    updateTripReport: function updateTripReport(tripReport, author, title, content, countries) {\n      return dispatch(_updateTripReport(tripReport, author, title, content, countries));\n    },\n    openPostModal: function openPostModal() {\n      return dispatch(_openPostModal());\n    },\n    closePostModal: function closePostModal() {\n      return dispatch(_closePostModal());\n    }\n  };\n};\n\nexport default connect(mapState, mapDispatch)(Post);\nPost.propTypes = {\n  error: PropTypes.object,\n  username: PropTypes.string,\n  showPostModal: PropTypes.bool,\n  fetchingTripReports: PropTypes.bool,\n  fetchedTripReports: PropTypes.bool,\n  tripReports: PropTypes.array,\n  fetchUserTripReports: PropTypes.func,\n  postTripReport: PropTypes.func,\n  deleteTripReport: PropTypes.func,\n  updateTripReport: PropTypes.func,\n  openPostModal: PropTypes.func,\n  closePostModal: PropTypes.func\n};","map":{"version":3,"sources":["/Users/peterzernia/projects/countries/src/containers/Post.js"],"names":["React","Component","connect","PropTypes","PostModal","TripReport","fetchUserTripReports","postTripReport","deleteTripReport","updateTripReport","openPostModal","closePostModal","DotLoader","Post","handleSubmit","e","preventDefault","options","target","countries","i","l","length","selected","push","value","props","username","title","content","listTripReports","tripReports","map","tripReport","id","fetchingTripReports","fetchedTripReports","mapState","state","error","user","showPostModal","modal","userTripReports","mapDispatch","dispatch","author","propTypes","object","string","bool","array","func"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport PropTypes from 'prop-types'\nimport PostModal from '../components/PostModal'\nimport TripReport from '../components/TripReport'\nimport {\n  fetchUserTripReports,\n  postTripReport,\n  deleteTripReport,\n  updateTripReport\n} from '../actions/tripReportActions'\nimport { openPostModal, closePostModal } from '../actions/modalActions'\nimport { DotLoader } from 'react-spinners';\n\nclass Post extends Component {\n\n  componentDidMount() {\n    this.props.fetchUserTripReports(this.props.username);\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    var options = e.target.countries.options;\n    var countries =[];\n    for (var i = 0, l = options.length; i < l; i++) {\n      if (options[i].selected) {\n        countries.push(options[i].value);\n      }\n    }\n    this.props.postTripReport(\n      this.props.username,\n      e.target.title.value,\n      e.target.content.value,\n      countries\n    );\n    this.props.closePostModal();\n  }\n\n  render(){\n\n    const listTripReports = this.props.tripReports.map(tripReport =>(\n      <div key={tripReport.id} className='trip-report'>\n        <TripReport {...tripReport} />\n        <button className=\"btn btn-danger\" onClick={() => this.props.deleteTripReport(tripReport.id)}>Delete Post</button>\n        <button className=\"btn btn-primary\" onClick={() => this.props.updateTripReport(tripReport.id, this.props.username, tripReport.title, tripReport.content, tripReport.countries)}>Update Post</button>\n      </div>\n    ));\n\n    return(\n      <div className=\"content\">\n        <PostModal {...this.props} handleSubmit={this.handleSubmit} />\n        <button className=\"btn btn-primary\" onClick={this.props.openPostModal}>New Post</button>\n        {this.props.fetchingTripReports && <DotLoader size={50} color={'#007bff'} className=\"content\" />}\n        {this.props.fetchedTripReports && <div>{listTripReports}</div>}\n      </div>\n    );\n  }\n}\n\nconst mapState = state => {\n  return {\n    error: state.tripReport.error,\n    username: state.user.user.username,\n    showPostModal: state.modal.showPostModal,\n    fetchingTripReports: state.tripReport.fetchingTripReports,\n    fetchedTripReports: state.tripReport.fetchedTripReports,\n    tripReports: state.tripReport.userTripReports\n  };\n}\n\nconst mapDispatch = dispatch => {\n  return {\n    fetchUserTripReports: (username) => dispatch(fetchUserTripReports(username)),\n    postTripReport: (title, content, author, countries) => dispatch(postTripReport(title, content, author, countries)),\n    deleteTripReport: (tripReport) => dispatch(deleteTripReport(tripReport)),\n    updateTripReport: (tripReport, author, title, content, countries) => dispatch(updateTripReport(tripReport, author, title, content, countries)),\n    openPostModal: () => dispatch(openPostModal()),\n    closePostModal: () => dispatch(closePostModal())\n  };\n}\n\nexport default connect(mapState, mapDispatch)(Post);\n\nPost.propTypes = {\n  error: PropTypes.object,\n  username: PropTypes.string,\n  showPostModal: PropTypes.bool,\n  fetchingTripReports: PropTypes.bool,\n  fetchedTripReports: PropTypes.bool,\n  tripReports: PropTypes.array,\n  fetchUserTripReports: PropTypes.func,\n  postTripReport: PropTypes.func,\n  deleteTripReport: PropTypes.func,\n  updateTripReport: PropTypes.func,\n  openPostModal: PropTypes.func,\n  closePostModal: PropTypes.func\n};\n"]},"metadata":{},"sourceType":"module"}