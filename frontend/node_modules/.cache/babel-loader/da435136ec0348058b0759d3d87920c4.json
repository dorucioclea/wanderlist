{"ast":null,"code":"import _classCallCheck from \"/Users/peterzernia/projects/countries/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/peterzernia/projects/countries/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/peterzernia/projects/countries/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/peterzernia/projects/countries/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/peterzernia/projects/countries/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/peterzernia/projects/countries/src/containers/Search.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport CountryModal from '../components/CountryModal';\nimport Results from '../components/Results';\nimport SearchBar from '../components/SearchBar';\nimport { connect } from 'react-redux';\nimport { fetchCountry as _fetchCountry } from '../actions/countryActions';\nimport { putUserData as _putUserData } from '../actions/userActions';\nimport { openCountryModal as _openCountryModal, closeCountryModal as _closeCountryModal } from '../actions/modalActions';\nimport { DotLoader } from 'react-spinners';\n\nvar Search =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Search, _Component);\n\n  function Search() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Search);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Search)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.handleSubmit = function (e) {\n      e.preventDefault();\n\n      _this.props.fetchCountry(e.target.country.value);\n    };\n\n    _this.handleClick = function (e) {\n      e.preventDefault();\n      var newCountryList = _this.props.userCountries;\n      var newCountry = _this.props.searchedCountry[e.target.name];\n\n      if (_this.props.userCountries.findIndex(function (i) {\n        return i.name === newCountry.name;\n      }) === -1) {\n        newCountryList = _this.props.userCountries.concat([newCountry]);\n      } else {\n        var index = newCountryList.findIndex(function (i) {\n          return i.name === newCountry.name;\n        });\n\n        if (index !== -1) {\n          newCountryList.splice(index, 1);\n        }\n      }\n\n      _this.props.putUserData(_this.props.username, newCountryList, _this.props.email, _this.props.home);\n    };\n\n    return _this;\n  }\n\n  _createClass(Search, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, React.createElement(SearchBar, {\n        handleSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }), \" \", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }), this.props.fetching && React.createElement(DotLoader, {\n        size: 50,\n        color: '#007bff',\n        className: \"content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }), this.props.fetched && React.createElement(Results, Object.assign({\n        handleClick: this.handleClick\n      }, this.props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      })), React.createElement(CountryModal, Object.assign({}, this.props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return Search;\n}(Component);\n\nvar mapState = function mapState(state) {\n  return {\n    username: state.user.user.username,\n    email: state.user.user.email,\n    home: state.user.user.home,\n    userCountries: state.user.user.countries,\n    authenticated: state.auth.authenticated,\n    searchedCountry: state.country.country,\n    fetched: state.country.fetched,\n    fetching: state.country.fetching,\n    showCountryModal: state.modal.showCountryModal,\n    modalCountry: state.modal.modalCountry\n  };\n};\n\nvar mapDispatch = function mapDispatch(dispatch, ownProps) {\n  return {\n    fetchCountry: function fetchCountry(query) {\n      return dispatch(_fetchCountry(query));\n    },\n    putUserData: function putUserData(username, countries, email, home) {\n      return dispatch(_putUserData(username, countries, email, home));\n    },\n    openCountryModal: function openCountryModal(country) {\n      return dispatch(_openCountryModal(country));\n    },\n    closeCountryModal: function closeCountryModal() {\n      return dispatch(_closeCountryModal());\n    }\n  };\n};\n\nexport default connect(mapState, mapDispatch)(Search);\nSearch.propTypes = {\n  username: PropTypes.string,\n  email: PropTypes.string,\n  home: PropTypes.number,\n  userCountries: PropTypes.array,\n  authenticated: PropTypes.bool,\n  searchedCountry: PropTypes.array,\n  fetched: PropTypes.bool,\n  fetching: PropTypes.bool,\n  showCountryModal: PropTypes.bool,\n  modalCountry: PropTypes.object,\n  fetchCountry: PropTypes.func,\n  putUserData: PropTypes.func,\n  openCountryModal: PropTypes.func,\n  closeCountryModal: PropTypes.func\n};","map":{"version":3,"sources":["/Users/peterzernia/projects/countries/src/containers/Search.js"],"names":["React","Component","PropTypes","CountryModal","Results","SearchBar","connect","fetchCountry","putUserData","openCountryModal","closeCountryModal","DotLoader","Search","handleSubmit","e","preventDefault","props","target","country","value","handleClick","newCountryList","userCountries","newCountry","searchedCountry","name","findIndex","i","concat","index","splice","username","email","home","fetching","fetched","mapState","state","user","countries","authenticated","auth","showCountryModal","modal","modalCountry","mapDispatch","dispatch","ownProps","query","propTypes","string","number","array","bool","object","func"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport CountryModal from '../components/CountryModal'\nimport Results from '../components/Results'\nimport SearchBar from '../components/SearchBar'\nimport { connect } from 'react-redux'\nimport { fetchCountry } from '../actions/countryActions'\nimport { putUserData } from '../actions/userActions'\nimport { openCountryModal, closeCountryModal } from '../actions/modalActions'\nimport { DotLoader } from 'react-spinners'\n\nclass Search extends Component {\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.props.fetchCountry(e.target.country.value);\n  }\n\n  /*\n  This function checks to see if the country is already in the user list,\n  adds it if it is not, and removes it if it is, then PUT requests the new list\n  to the Django API. The button in the Results component is given the\n  name = index of the array. Then e.target.name == the index of the clicked\n  country in the array of searchedCountry when clicked. From the array index,\n  the newCountry object is the searchedCountry[e.target.name].\n  */\n  handleClick = (e) => {\n    e.preventDefault();\n    var newCountryList = this.props.userCountries\n    var newCountry = this.props.searchedCountry[e.target.name]\n    if (this.props.userCountries.findIndex(i => i.name === newCountry.name) === -1) {\n      newCountryList = this.props.userCountries.concat([newCountry]);\n    } else {\n      var index = newCountryList.findIndex(i => i.name === newCountry.name);\n      if (index !== -1){\n        newCountryList.splice(index, 1);\n      }\n    }\n    this.props.putUserData(\n      this.props.username,\n      newCountryList,\n      this.props.email,\n      this.props.home\n    );\n  }\n\n  render() {\n      return (\n        <div className=\"content\">\n          <SearchBar handleSubmit={this.handleSubmit} /> <br/>\n          {this.props.fetching && <DotLoader size={50} color={'#007bff'} className=\"content\" />}\n          {this.props.fetched &&<Results handleClick={this.handleClick} {...this.props} />}\n          <CountryModal {...this.props} />\n        </div>\n      );\n  }\n}\n\nconst mapState = state => {\n  return {\n    username: state.user.user.username,\n    email: state.user.user.email,\n    home: state.user.user.home,\n    userCountries: state.user.user.countries,\n    authenticated: state.auth.authenticated,\n    searchedCountry: state.country.country,\n    fetched: state.country.fetched,\n    fetching: state.country.fetching,\n    showCountryModal: state.modal.showCountryModal,\n    modalCountry: state.modal.modalCountry\n  };\n};\n\nconst mapDispatch = (dispatch, ownProps) => {\n  return {\n    fetchCountry: (query) => dispatch(fetchCountry(query)),\n    putUserData: (username, countries, email, home) => dispatch(putUserData(username, countries, email, home)),\n    openCountryModal: (country) => dispatch(openCountryModal(country)),\n    closeCountryModal: () => dispatch(closeCountryModal())\n  };\n};\n\nexport default connect(mapState, mapDispatch)(Search);\n\nSearch.propTypes = {\n  username: PropTypes.string,\n  email: PropTypes.string,\n  home: PropTypes.number,\n  userCountries: PropTypes.array,\n  authenticated: PropTypes.bool,\n  searchedCountry: PropTypes.array,\n  fetched: PropTypes.bool,\n  fetching: PropTypes.bool,\n  showCountryModal: PropTypes.bool,\n  modalCountry: PropTypes.object,\n  fetchCountry: PropTypes.func,\n  putUserData: PropTypes.func,\n  openCountryModal: PropTypes.func,\n  closeCountryModal: PropTypes.func\n};\n"]},"metadata":{},"sourceType":"module"}