{"ast":null,"code":"import axios from 'axios';\nimport { fetchUser } from './userActions';\nimport { fetchUserTripReports } from './tripReportActions'; // Authentication actions\n\nexport var authStart = function authStart() {\n  return {\n    type: \"AUTH_START\"\n  };\n};\nexport var authSuccess = function authSuccess(token) {\n  return {\n    type: \"AUTH_SUCCESS\",\n    token: token\n  };\n};\nexport var authFail = function authFail() {\n  return {\n    type: \"AUTH_FAIL\"\n  };\n};\n/*\nThe token stored in localStorage to authenticate the user is removed, logging\nthe user out.\n*/\n\nexport var authLogout = function authLogout() {\n  localStorage.removeItem('token');\n  localStorage.removeItem('username');\n  return {\n    type: \"AUTH_LOGOUT\"\n  };\n};\n/*\nLogs user in using axios and recieves a token from the Django API. This token\nis stored in localStorage.\n*/\n\nexport var authLogin = function authLogin(username, password) {\n  return function (dispatch) {\n    dispatch(authStart());\n    axios.post(\"\".concat(process.env.REACT_APP_API_URL, \"/api/v1/rest-auth/login/\"), {\n      username: username,\n      password: password\n    }).then(function (response) {\n      var token = response.data.key;\n      localStorage.setItem('token', token);\n      localStorage.setItem('username', username);\n      dispatch(authSuccess(token));\n      dispatch(fetchUser());\n      dispatch(fetchUserTripReports(username));\n    }).catch(function (err) {\n      dispatch(authFail());\n      dispatch({\n        type: \"ADD_ERROR\",\n        error: err\n      });\n    });\n  };\n};\n/*\nSimilar to login, registers a user with the Django REST API which returns a\ntoken to authenticate the user. This token is stored in localStorage.\n*/\n\nexport var authRegister = function authRegister(username, email, password1, password2, home) {\n  return function (dispatch) {\n    localStorage.removeItem('token');\n    dispatch(authStart());\n    axios.post(\"\".concat(process.env.REACT_APP_API_URL, \"/api/v1/rest-auth/registration/\"), {\n      username: username,\n      email: email,\n      password1: password1,\n      password2: password2,\n      home: home\n    }).then(function (response) {\n      var token = response.data.key;\n      localStorage.setItem('token', token);\n      localStorage.setItem('username', username);\n      dispatch(authSuccess(token));\n      dispatch(fetchUser());\n      dispatch({\n        type: \"ADD_SUCCESS\",\n        success: 'You have successfully registered.'\n      });\n    }).catch(function (err) {\n      dispatch(authFail());\n      dispatch({\n        type: \"ADD_ERROR\",\n        error: err\n      });\n    });\n  };\n};\n/*\nChecks to see if the authentication token exists in localStorage. If a token\nexists, it runs the login function. If no token exits it runs the logout\nfunction.\n*/\n\nexport var authCheckState = function authCheckState() {\n  var token = localStorage.getItem('token');\n  return function (dispatch) {\n    if (token === null) {\n      dispatch(authLogout());\n    } else {\n      dispatch(authSuccess(token));\n    }\n  };\n};\n/*\nThe users email is posted to the Django url, which then sends an email with a\nlink where the user can reset their password. Since the state is not changing,\nthere is no need to dispatch any actions other than those related to success\nand errors.\n*/\n\nexport var requestPasswordReset = function requestPasswordReset(email) {\n  return function (dispatch) {\n    axios.post(\"\".concat(process.env.REACT_APP_API_URL, \"/api/v1/rest-auth/password/reset/\"), {\n      email: email\n    }).then(function (response) {\n      dispatch({\n        type: \"ADD_SUCCESS\",\n        success: 'An email has been sent with instructions.'\n      });\n    }).catch(function (err) {\n      dispatch({\n        type: \"ADD_ERROR\",\n        error: err\n      });\n    });\n  };\n};","map":{"version":3,"sources":["/Users/peterzernia/projects/wanderlist/src/actions/authActions.js"],"names":["axios","fetchUser","fetchUserTripReports","authStart","type","authSuccess","token","authFail","authLogout","localStorage","removeItem","authLogin","username","password","dispatch","post","process","env","REACT_APP_API_URL","then","response","data","key","setItem","catch","err","error","authRegister","email","password1","password2","home","success","authCheckState","getItem","requestPasswordReset"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport { fetchUser } from './userActions'\nimport { fetchUserTripReports } from './tripReportActions'\n\n// Authentication actions\nexport const authStart = () => ({type: \"AUTH_START\"})\nexport const authSuccess = token => ({type: \"AUTH_SUCCESS\", token})\n\nexport const authFail = () => {\n  return {\n    type: \"AUTH_FAIL\"\n  }\n}\n\n/*\nThe token stored in localStorage to authenticate the user is removed, logging\nthe user out.\n*/\nexport const authLogout = () => {\n  localStorage.removeItem('token');\n  localStorage.removeItem('username');\n  return {\n    type: \"AUTH_LOGOUT\"\n  }\n}\n\n/*\nLogs user in using axios and recieves a token from the Django API. This token\nis stored in localStorage.\n*/\nexport const authLogin = (username, password) => {\n  return dispatch => {\n    dispatch(authStart());\n    axios.post(`${process.env.REACT_APP_API_URL}/api/v1/rest-auth/login/`, {\n      username: username,\n      password: password\n    })\n      .then(response => {\n        const token = response.data.key;\n        localStorage.setItem('token', token);\n        localStorage.setItem('username', username);\n        dispatch(authSuccess(token));\n        dispatch(fetchUser());\n        dispatch(fetchUserTripReports(username));\n      })\n      .catch(err => {\n        dispatch(authFail());\n        dispatch({type: \"ADD_ERROR\", error: err});\n      })\n  }\n}\n\n/*\nSimilar to login, registers a user with the Django REST API which returns a\ntoken to authenticate the user. This token is stored in localStorage.\n*/\nexport const authRegister = (username, email, password1, password2, home) => {\n  return dispatch => {\n    localStorage.removeItem('token');\n    dispatch(authStart());\n    axios.post(`${process.env.REACT_APP_API_URL}/api/v1/rest-auth/registration/`, {\n      username: username,\n      email: email,\n      password1: password1,\n      password2: password2,\n      home: home\n    })\n      .then(response => {\n        const token = response.data.key;\n        localStorage.setItem('token', token);\n        localStorage.setItem('username', username);\n        dispatch(authSuccess(token));\n        dispatch(fetchUser());\n        dispatch({type: \"ADD_SUCCESS\", success: 'You have successfully registered.'});\n      })\n      .catch(err => {\n        dispatch(authFail());\n        dispatch({type: \"ADD_ERROR\", error: err});\n      })\n  }\n}\n\n/*\nChecks to see if the authentication token exists in localStorage. If a token\nexists, it runs the login function. If no token exits it runs the logout\nfunction.\n*/\nexport const authCheckState = () => {\n  const token = localStorage.getItem('token');\n  return dispatch => {\n    if (token === null) {\n      dispatch(authLogout());\n    } else {\n      dispatch(authSuccess(token));\n    }\n  }\n}\n\n/*\nThe users email is posted to the Django url, which then sends an email with a\nlink where the user can reset their password. Since the state is not changing,\nthere is no need to dispatch any actions other than those related to success\nand errors.\n*/\nexport const requestPasswordReset = (email) => {\n  return dispatch => {\n    axios.post(`${process.env.REACT_APP_API_URL}/api/v1/rest-auth/password/reset/`, {\n      email: email,\n    })\n      .then(response => {\n        dispatch({type: \"ADD_SUCCESS\", success: 'An email has been sent with instructions.'});\n      })\n      .catch(err => {\n        dispatch({type: \"ADD_ERROR\", error: err});\n      })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}